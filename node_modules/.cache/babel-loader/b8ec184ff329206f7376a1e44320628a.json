{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTestUtils\n */\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nvar EventPropagators = require(\"./EventPropagators\");\n\nvar React = require(\"./React\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactTextComponent = require(\"./ReactTextComponent\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar assign = require(\"./Object.assign\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction Event(suffix) {}\n/**\n * @class ReactTestUtils\n */\n\n/**\n * Todo: Support the entire DOM.scry query syntax. For now, these simple\n * utilities will suffice for testing purposes.\n * @lends ReactTestUtils\n */\n\n\nvar ReactTestUtils = {\n  renderIntoDocument: function (instance) {\n    var div = document.createElement('div'); // None of our tests actually require attaching the container to the\n    // DOM, and doing so creates a mess that we rely on test isolation to\n    // clean up, so we're going to stop honoring the name of this method\n    // (and probably rename it eventually) if no problems arise.\n    // document.documentElement.appendChild(div);\n\n    return React.render(instance, div);\n  },\n  isElement: function (element) {\n    return ReactElement.isValidElement(element);\n  },\n  isElementOfType: function (inst, convenienceConstructor) {\n    return ReactElement.isValidElement(inst) && inst.type === convenienceConstructor.type;\n  },\n  isDOMComponent: function (inst) {\n    return !!(inst && inst.mountComponent && inst.tagName);\n  },\n  isDOMComponentElement: function (inst) {\n    return !!(inst && ReactElement.isValidElement(inst) && !!inst.tagName);\n  },\n  isCompositeComponent: function (inst) {\n    return typeof inst.render === 'function' && typeof inst.setState === 'function';\n  },\n  isCompositeComponentWithType: function (inst, type) {\n    return !!(ReactTestUtils.isCompositeComponent(inst) && inst.constructor === type.type);\n  },\n  isCompositeComponentElement: function (inst) {\n    if (!ReactElement.isValidElement(inst)) {\n      return false;\n    } // We check the prototype of the type that will get mounted, not the\n    // instance itself. This is a future proof way of duck typing.\n\n\n    var prototype = inst.type.prototype;\n    return typeof prototype.render === 'function' && typeof prototype.setState === 'function';\n  },\n  isCompositeComponentElementWithType: function (inst, type) {\n    return !!(ReactTestUtils.isCompositeComponentElement(inst) && inst.constructor === type);\n  },\n  isTextComponent: function (inst) {\n    return inst instanceof ReactTextComponent.type;\n  },\n  findAllInRenderedTree: function (inst, test) {\n    if (!inst) {\n      return [];\n    }\n\n    var ret = test(inst) ? [inst] : [];\n\n    if (ReactTestUtils.isDOMComponent(inst)) {\n      var renderedChildren = inst._renderedChildren;\n      var key;\n\n      for (key in renderedChildren) {\n        if (!renderedChildren.hasOwnProperty(key)) {\n          continue;\n        }\n\n        ret = ret.concat(ReactTestUtils.findAllInRenderedTree(renderedChildren[key], test));\n      }\n    } else if (ReactTestUtils.isCompositeComponent(inst)) {\n      ret = ret.concat(ReactTestUtils.findAllInRenderedTree(inst._renderedComponent, test));\n    }\n\n    return ret;\n  },\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the class name matching `className`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithClass: function (root, className) {\n    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {\n      var instClassName = inst.props.className;\n      return ReactTestUtils.isDOMComponent(inst) && instClassName && (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1;\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithClass: function (root, className) {\n    var all = ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);\n\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for class:' + className);\n    }\n\n    return all[0];\n  },\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the tag name matching `tagName`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithTag: function (root, tagName) {\n    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {\n      return ReactTestUtils.isDOMComponent(inst) && inst.tagName === tagName.toUpperCase();\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithTag: function (root, tagName) {\n    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);\n\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for tag:' + tagName);\n    }\n\n    return all[0];\n  },\n\n  /**\n   * Finds all instances of components with type equal to `componentType`.\n   * @return an array of all the matches.\n   */\n  scryRenderedComponentsWithType: function (root, componentType) {\n    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {\n      return ReactTestUtils.isCompositeComponentWithType(inst, componentType);\n    });\n  },\n\n  /**\n   * Same as `scryRenderedComponentsWithType` but expects there to be one result\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactComponent} The one match.\n   */\n  findRenderedComponentWithType: function (root, componentType) {\n    var all = ReactTestUtils.scryRenderedComponentsWithType(root, componentType);\n\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for componentType:' + componentType);\n    }\n\n    return all[0];\n  },\n\n  /**\n   * Pass a mocked component module to this method to augment it with\n   * useful methods that allow it to be used as a dummy React component.\n   * Instead of rendering as usual, the component will become a simple\n   * <div> containing any provided children.\n   *\n   * @param {object} module the mock function object exported from a\n   *                        module that defines the component to be mocked\n   * @param {?string} mockTagName optional dummy root tag name to return\n   *                              from render method (overrides\n   *                              module.mockTagName if provided)\n   * @return {object} the ReactTestUtils object (for chaining)\n   */\n  mockComponent: function (module, mockTagName) {\n    mockTagName = mockTagName || module.mockTagName || \"div\";\n    var ConvenienceConstructor = React.createClass({\n      displayName: \"ConvenienceConstructor\",\n      render: function () {\n        return React.createElement(mockTagName, null, this.props.children);\n      }\n    });\n    module.mockImplementation(ConvenienceConstructor);\n    module.type = ConvenienceConstructor.type;\n    module.isReactLegacyFactory = true;\n    return this;\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on an `Element` node.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`\n   * @param {!Element} node The dom to simulate an event occurring on.\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnNode: function (topLevelType, node, fakeNativeEvent) {\n    fakeNativeEvent.target = node;\n    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(topLevelType, fakeNativeEvent);\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on the `ReactDOMComponent` `comp`.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.\n   * @param comp {!ReactDOMComponent}\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnDOMComponent: function (topLevelType, comp, fakeNativeEvent) {\n    ReactTestUtils.simulateNativeEventOnNode(topLevelType, comp.getDOMNode(), fakeNativeEvent);\n  },\n  nativeTouchData: function (x, y) {\n    return {\n      touches: [{\n        pageX: x,\n        pageY: y\n      }]\n    };\n  },\n  Simulate: null,\n  SimulateNative: {}\n};\n/**\n * Exports:\n *\n * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`\n * - ... (All keys from event plugin `eventTypes` objects)\n */\n\nfunction makeSimulator(eventType) {\n  return function (domComponentOrNode, eventData) {\n    var node;\n\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      node = domComponentOrNode.getDOMNode();\n    } else if (domComponentOrNode.tagName) {\n      node = domComponentOrNode;\n    }\n\n    var fakeNativeEvent = new Event();\n    fakeNativeEvent.target = node; // We don't use SyntheticEvent.getPooled in order to not have to worry about\n    // properly destroying any properties assigned from `eventData` upon release\n\n    var event = new SyntheticEvent(ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType], ReactMount.getID(node), fakeNativeEvent);\n    assign(event, eventData);\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n    ReactUpdates.batchedUpdates(function () {\n      EventPluginHub.enqueueEvents(event);\n      EventPluginHub.processEventQueue();\n    });\n  };\n}\n\nfunction buildSimulators() {\n  ReactTestUtils.Simulate = {};\n  var eventType;\n\n  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {\n    /**\n     * @param {!Element || ReactDOMComponent} domComponentOrNode\n     * @param {?object} eventData Fake event data to use in SyntheticEvent.\n     */\n    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);\n  }\n} // Rebuild ReactTestUtils.Simulate whenever event plugins are injected\n\n\nvar oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;\n\nEventPluginHub.injection.injectEventPluginOrder = function () {\n  oldInjectEventPluginOrder.apply(this, arguments);\n  buildSimulators();\n};\n\nvar oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;\n\nEventPluginHub.injection.injectEventPluginsByName = function () {\n  oldInjectEventPlugins.apply(this, arguments);\n  buildSimulators();\n};\n\nbuildSimulators();\n/**\n * Exports:\n *\n * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`\n * - ... (All keys from `EventConstants.topLevelTypes`)\n *\n * Note: Top level event types are a subset of the entire set of handler types\n * (which include a broader set of \"synthetic\" events). For example, onDragDone\n * is a synthetic event. Except when testing an event plugin or React's event\n * handling code specifically, you probably want to use ReactTestUtils.Simulate\n * to dispatch synthetic events.\n */\n\nfunction makeNativeSimulator(eventType) {\n  return function (domComponentOrNode, nativeEventData) {\n    var fakeNativeEvent = new Event(eventType);\n    assign(fakeNativeEvent, nativeEventData);\n\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      ReactTestUtils.simulateNativeEventOnDOMComponent(eventType, domComponentOrNode, fakeNativeEvent);\n    } else if (!!domComponentOrNode.tagName) {\n      // Will allow on actual dom nodes.\n      ReactTestUtils.simulateNativeEventOnNode(eventType, domComponentOrNode, fakeNativeEvent);\n    }\n  };\n}\n\nvar eventType;\n\nfor (eventType in topLevelTypes) {\n  // Event type is stored as 'topClick' - we transform that to 'click'\n  var convenienceName = eventType.indexOf('top') === 0 ? eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;\n  /**\n   * @param {!Element || ReactDOMComponent} domComponentOrNode\n   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.\n   */\n\n  ReactTestUtils.SimulateNative[convenienceName] = makeNativeSimulator(eventType);\n}\n\nmodule.exports = ReactTestUtils;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/ReactTestUtils.js"],"names":["EventConstants","require","EventPluginHub","EventPropagators","React","ReactElement","ReactBrowserEventEmitter","ReactMount","ReactTextComponent","ReactUpdates","SyntheticEvent","assign","topLevelTypes","Event","suffix","ReactTestUtils","renderIntoDocument","instance","div","document","createElement","render","isElement","element","isValidElement","isElementOfType","inst","convenienceConstructor","type","isDOMComponent","mountComponent","tagName","isDOMComponentElement","isCompositeComponent","setState","isCompositeComponentWithType","constructor","isCompositeComponentElement","prototype","isCompositeComponentElementWithType","isTextComponent","findAllInRenderedTree","test","ret","renderedChildren","_renderedChildren","key","hasOwnProperty","concat","_renderedComponent","scryRenderedDOMComponentsWithClass","root","className","instClassName","props","indexOf","findRenderedDOMComponentWithClass","all","length","Error","scryRenderedDOMComponentsWithTag","toUpperCase","findRenderedDOMComponentWithTag","scryRenderedComponentsWithType","componentType","findRenderedComponentWithType","mockComponent","module","mockTagName","ConvenienceConstructor","createClass","displayName","children","mockImplementation","isReactLegacyFactory","simulateNativeEventOnNode","topLevelType","node","fakeNativeEvent","target","ReactEventListener","dispatchEvent","simulateNativeEventOnDOMComponent","comp","getDOMNode","nativeTouchData","x","y","touches","pageX","pageY","Simulate","SimulateNative","makeSimulator","eventType","domComponentOrNode","eventData","event","eventNameDispatchConfigs","getID","accumulateTwoPhaseDispatches","batchedUpdates","enqueueEvents","processEventQueue","buildSimulators","oldInjectEventPluginOrder","injection","injectEventPluginOrder","apply","arguments","oldInjectEventPlugins","injectEventPluginsByName","makeNativeSimulator","nativeEventData","convenienceName","charAt","toLowerCase","substr","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTestUtils\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar React = require(\"./React\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactBrowserEventEmitter = require(\"./ReactBrowserEventEmitter\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactTextComponent = require(\"./ReactTextComponent\");\nvar ReactUpdates = require(\"./ReactUpdates\");\nvar SyntheticEvent = require(\"./SyntheticEvent\");\n\nvar assign = require(\"./Object.assign\");\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\nfunction Event(suffix) {}\n\n/**\n * @class ReactTestUtils\n */\n\n/**\n * Todo: Support the entire DOM.scry query syntax. For now, these simple\n * utilities will suffice for testing purposes.\n * @lends ReactTestUtils\n */\nvar ReactTestUtils = {\n  renderIntoDocument: function(instance) {\n    var div = document.createElement('div');\n    // None of our tests actually require attaching the container to the\n    // DOM, and doing so creates a mess that we rely on test isolation to\n    // clean up, so we're going to stop honoring the name of this method\n    // (and probably rename it eventually) if no problems arise.\n    // document.documentElement.appendChild(div);\n    return React.render(instance, div);\n  },\n\n  isElement: function(element) {\n    return ReactElement.isValidElement(element);\n  },\n\n  isElementOfType: function(inst, convenienceConstructor) {\n    return (\n      ReactElement.isValidElement(inst) &&\n      inst.type === convenienceConstructor.type\n    );\n  },\n\n  isDOMComponent: function(inst) {\n    return !!(inst && inst.mountComponent && inst.tagName);\n  },\n\n  isDOMComponentElement: function(inst) {\n    return !!(inst &&\n              ReactElement.isValidElement(inst) &&\n              !!inst.tagName);\n  },\n\n  isCompositeComponent: function(inst) {\n    return typeof inst.render === 'function' &&\n           typeof inst.setState === 'function';\n  },\n\n  isCompositeComponentWithType: function(inst, type) {\n    return !!(ReactTestUtils.isCompositeComponent(inst) &&\n             (inst.constructor === type.type));\n  },\n\n  isCompositeComponentElement: function(inst) {\n    if (!ReactElement.isValidElement(inst)) {\n      return false;\n    }\n    // We check the prototype of the type that will get mounted, not the\n    // instance itself. This is a future proof way of duck typing.\n    var prototype = inst.type.prototype;\n    return (\n      typeof prototype.render === 'function' &&\n      typeof prototype.setState === 'function'\n    );\n  },\n\n  isCompositeComponentElementWithType: function(inst, type) {\n    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&\n             (inst.constructor === type));\n  },\n\n  isTextComponent: function(inst) {\n    return inst instanceof ReactTextComponent.type;\n  },\n\n  findAllInRenderedTree: function(inst, test) {\n    if (!inst) {\n      return [];\n    }\n    var ret = test(inst) ? [inst] : [];\n    if (ReactTestUtils.isDOMComponent(inst)) {\n      var renderedChildren = inst._renderedChildren;\n      var key;\n      for (key in renderedChildren) {\n        if (!renderedChildren.hasOwnProperty(key)) {\n          continue;\n        }\n        ret = ret.concat(\n          ReactTestUtils.findAllInRenderedTree(renderedChildren[key], test)\n        );\n      }\n    } else if (ReactTestUtils.isCompositeComponent(inst)) {\n      ret = ret.concat(\n        ReactTestUtils.findAllInRenderedTree(inst._renderedComponent, test)\n      );\n    }\n    return ret;\n  },\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the class name matching `className`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithClass: function(root, className) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      var instClassName = inst.props.className;\n      return ReactTestUtils.isDOMComponent(inst) && (\n        instClassName &&\n        (' ' + instClassName + ' ').indexOf(' ' + className + ' ') !== -1\n      );\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithClass: function(root, className) {\n    var all =\n      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for class:' + className);\n    }\n    return all[0];\n  },\n\n\n  /**\n   * Finds all instance of components in the rendered tree that are DOM\n   * components with the tag name matching `tagName`.\n   * @return an array of all the matches.\n   */\n  scryRenderedDOMComponentsWithTag: function(root, tagName) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      return ReactTestUtils.isDOMComponent(inst) &&\n            inst.tagName === tagName.toUpperCase();\n    });\n  },\n\n  /**\n   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactDOMComponent} The one match.\n   */\n  findRenderedDOMComponentWithTag: function(root, tagName) {\n    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);\n    if (all.length !== 1) {\n      throw new Error('Did not find exactly one match for tag:' + tagName);\n    }\n    return all[0];\n  },\n\n\n  /**\n   * Finds all instances of components with type equal to `componentType`.\n   * @return an array of all the matches.\n   */\n  scryRenderedComponentsWithType: function(root, componentType) {\n    return ReactTestUtils.findAllInRenderedTree(root, function(inst) {\n      return ReactTestUtils.isCompositeComponentWithType(\n        inst,\n        componentType\n      );\n    });\n  },\n\n  /**\n   * Same as `scryRenderedComponentsWithType` but expects there to be one result\n   * and returns that one result, or throws exception if there is any other\n   * number of matches besides one.\n   * @return {!ReactComponent} The one match.\n   */\n  findRenderedComponentWithType: function(root, componentType) {\n    var all = ReactTestUtils.scryRenderedComponentsWithType(\n      root,\n      componentType\n    );\n    if (all.length !== 1) {\n      throw new Error(\n        'Did not find exactly one match for componentType:' + componentType\n      );\n    }\n    return all[0];\n  },\n\n  /**\n   * Pass a mocked component module to this method to augment it with\n   * useful methods that allow it to be used as a dummy React component.\n   * Instead of rendering as usual, the component will become a simple\n   * <div> containing any provided children.\n   *\n   * @param {object} module the mock function object exported from a\n   *                        module that defines the component to be mocked\n   * @param {?string} mockTagName optional dummy root tag name to return\n   *                              from render method (overrides\n   *                              module.mockTagName if provided)\n   * @return {object} the ReactTestUtils object (for chaining)\n   */\n  mockComponent: function(module, mockTagName) {\n    mockTagName = mockTagName || module.mockTagName || \"div\";\n\n    var ConvenienceConstructor = React.createClass({displayName: \"ConvenienceConstructor\",\n      render: function() {\n        return React.createElement(\n          mockTagName,\n          null,\n          this.props.children\n        );\n      }\n    });\n\n    module.mockImplementation(ConvenienceConstructor);\n\n    module.type = ConvenienceConstructor.type;\n    module.isReactLegacyFactory = true;\n\n    return this;\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on an `Element` node.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`\n   * @param {!Element} node The dom to simulate an event occurring on.\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnNode: function(topLevelType, node, fakeNativeEvent) {\n    fakeNativeEvent.target = node;\n    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(\n      topLevelType,\n      fakeNativeEvent\n    );\n  },\n\n  /**\n   * Simulates a top level event being dispatched from a raw event that occured\n   * on the `ReactDOMComponent` `comp`.\n   * @param topLevelType {Object} A type from `EventConstants.topLevelTypes`.\n   * @param comp {!ReactDOMComponent}\n   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.\n   */\n  simulateNativeEventOnDOMComponent: function(\n      topLevelType,\n      comp,\n      fakeNativeEvent) {\n    ReactTestUtils.simulateNativeEventOnNode(\n      topLevelType,\n      comp.getDOMNode(),\n      fakeNativeEvent\n    );\n  },\n\n  nativeTouchData: function(x, y) {\n    return {\n      touches: [\n        {pageX: x, pageY: y}\n      ]\n    };\n  },\n\n  Simulate: null,\n  SimulateNative: {}\n};\n\n/**\n * Exports:\n *\n * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`\n * - ... (All keys from event plugin `eventTypes` objects)\n */\nfunction makeSimulator(eventType) {\n  return function(domComponentOrNode, eventData) {\n    var node;\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      node = domComponentOrNode.getDOMNode();\n    } else if (domComponentOrNode.tagName) {\n      node = domComponentOrNode;\n    }\n\n    var fakeNativeEvent = new Event();\n    fakeNativeEvent.target = node;\n    // We don't use SyntheticEvent.getPooled in order to not have to worry about\n    // properly destroying any properties assigned from `eventData` upon release\n    var event = new SyntheticEvent(\n      ReactBrowserEventEmitter.eventNameDispatchConfigs[eventType],\n      ReactMount.getID(node),\n      fakeNativeEvent\n    );\n    assign(event, eventData);\n    EventPropagators.accumulateTwoPhaseDispatches(event);\n\n    ReactUpdates.batchedUpdates(function() {\n      EventPluginHub.enqueueEvents(event);\n      EventPluginHub.processEventQueue();\n    });\n  };\n}\n\nfunction buildSimulators() {\n  ReactTestUtils.Simulate = {};\n\n  var eventType;\n  for (eventType in ReactBrowserEventEmitter.eventNameDispatchConfigs) {\n    /**\n     * @param {!Element || ReactDOMComponent} domComponentOrNode\n     * @param {?object} eventData Fake event data to use in SyntheticEvent.\n     */\n    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);\n  }\n}\n\n// Rebuild ReactTestUtils.Simulate whenever event plugins are injected\nvar oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;\nEventPluginHub.injection.injectEventPluginOrder = function() {\n  oldInjectEventPluginOrder.apply(this, arguments);\n  buildSimulators();\n};\nvar oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;\nEventPluginHub.injection.injectEventPluginsByName = function() {\n  oldInjectEventPlugins.apply(this, arguments);\n  buildSimulators();\n};\n\nbuildSimulators();\n\n/**\n * Exports:\n *\n * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`\n * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`\n * - ... (All keys from `EventConstants.topLevelTypes`)\n *\n * Note: Top level event types are a subset of the entire set of handler types\n * (which include a broader set of \"synthetic\" events). For example, onDragDone\n * is a synthetic event. Except when testing an event plugin or React's event\n * handling code specifically, you probably want to use ReactTestUtils.Simulate\n * to dispatch synthetic events.\n */\n\nfunction makeNativeSimulator(eventType) {\n  return function(domComponentOrNode, nativeEventData) {\n    var fakeNativeEvent = new Event(eventType);\n    assign(fakeNativeEvent, nativeEventData);\n    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {\n      ReactTestUtils.simulateNativeEventOnDOMComponent(\n        eventType,\n        domComponentOrNode,\n        fakeNativeEvent\n      );\n    } else if (!!domComponentOrNode.tagName) {\n      // Will allow on actual dom nodes.\n      ReactTestUtils.simulateNativeEventOnNode(\n        eventType,\n        domComponentOrNode,\n        fakeNativeEvent\n      );\n    }\n  };\n}\n\nvar eventType;\nfor (eventType in topLevelTypes) {\n  // Event type is stored as 'topClick' - we transform that to 'click'\n  var convenienceName = eventType.indexOf('top') === 0 ?\n    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;\n  /**\n   * @param {!Element || ReactDOMComponent} domComponentOrNode\n   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.\n   */\n  ReactTestUtils.SimulateNative[convenienceName] =\n    makeNativeSimulator(eventType);\n}\n\nmodule.exports = ReactTestUtils;\n"]},"metadata":{},"sourceType":"script"}