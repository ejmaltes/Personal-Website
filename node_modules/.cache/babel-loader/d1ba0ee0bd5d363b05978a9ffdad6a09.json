{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule instantiateReactComponent\n * @typechecks static-only\n */\n\"use strict\";\n\nvar warning = require(\"./warning\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactLegacyElement = require(\"./ReactLegacyElement\");\n\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\n\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\n/**\n * Given an `element` create an instance that will actually be mounted.\n *\n * @param {object} element\n * @param {*} parentCompositeType The composite type that resolved this.\n * @return {object} A new instance of the element's constructor.\n * @protected\n */\n\n\nfunction instantiateReactComponent(element, parentCompositeType) {\n  var instance;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    \"production\" !== process.env.NODE_ENV ? warning(element && (typeof element.type === 'function' || typeof element.type === 'string'), 'Only functions or strings can be mounted as React components.') : null; // Resolve mock instances\n\n    if (element.type._mockedReactClassConstructor) {\n      // If this is a mocked class, we treat the legacy factory as if it was the\n      // class constructor for future proofing unit tests. Because this might\n      // be mocked as a legacy factory, we ignore any warnings triggerd by\n      // this temporary hack.\n      ReactLegacyElement._isLegacyCallWarningEnabled = false;\n\n      try {\n        instance = new element.type._mockedReactClassConstructor(element.props);\n      } finally {\n        ReactLegacyElement._isLegacyCallWarningEnabled = true;\n      } // If the mock implementation was a legacy factory, then it returns a\n      // element. We need to turn this into a real component instance.\n\n\n      if (ReactElement.isValidElement(instance)) {\n        instance = new instance.type(instance.props);\n      }\n\n      var render = instance.render;\n\n      if (!render) {\n        // For auto-mocked factories, the prototype isn't shimmed and therefore\n        // there is no render function on the instance. We replace the whole\n        // component with an empty component instance instead.\n        element = ReactEmptyComponent.getEmptyComponent();\n      } else {\n        if (render._isMockFunction && !render._getMockImplementation()) {\n          // Auto-mocked components may have a prototype with a mocked render\n          // function. For those, we'll need to mock the result of the render\n          // since we consider undefined to be invalid results from render.\n          render.mockImplementation(ReactEmptyComponent.getEmptyComponent);\n        }\n\n        instance.construct(element);\n        return instance;\n      }\n    }\n  } // Special case string values\n\n\n  if (typeof element.type === 'string') {\n    instance = ReactNativeComponent.createInstanceForTag(element.type, element.props, parentCompositeType);\n  } else {\n    // Normal case for non-mocks and non-strings\n    instance = new element.type(element.props);\n  }\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    \"production\" !== process.env.NODE_ENV ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function', 'Only React Components can be mounted.') : null;\n  } // This actually sets up the internal instance. This will become decoupled\n  // from the public instance in a future diff.\n\n\n  instance.construct(element);\n  return instance;\n}\n\nmodule.exports = instantiateReactComponent;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/instantiateReactComponent.js"],"names":["warning","require","ReactElement","ReactLegacyElement","ReactNativeComponent","ReactEmptyComponent","instantiateReactComponent","element","parentCompositeType","instance","process","env","NODE_ENV","type","_mockedReactClassConstructor","_isLegacyCallWarningEnabled","props","isValidElement","render","getEmptyComponent","_isMockFunction","_getMockImplementation","mockImplementation","construct","createInstanceForTag","mountComponent","receiveComponent","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIE,kBAAkB,GAAGF,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAII,mBAAmB,GAAGJ,OAAO,CAAC,uBAAD,CAAjC;AAEA;;;;;;;;;;AAQA,SAASK,yBAAT,CAAmCC,OAAnC,EAA4CC,mBAA5C,EAAiE;AAC/D,MAAIC,QAAJ;;AAEA,MAAI,iBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;AACxC,qBAAiBF,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,OAAO,CAC9CO,OAAO,KAAK,OAAOA,OAAO,CAACM,IAAf,KAAwB,UAAxB,IACG,OAAON,OAAO,CAACM,IAAf,KAAwB,QADhC,CADuC,EAG9C,+DAH8C,CAA/C,GAIG,IAJJ,CADyC,CAOzC;;AACA,QAAIN,OAAO,CAACM,IAAR,CAAaC,4BAAjB,EAA+C;AAC7C;AACA;AACA;AACA;AACAX,MAAAA,kBAAkB,CAACY,2BAAnB,GAAiD,KAAjD;;AACA,UAAI;AACFN,QAAAA,QAAQ,GAAG,IAAIF,OAAO,CAACM,IAAR,CAAaC,4BAAjB,CACTP,OAAO,CAACS,KADC,CAAX;AAGD,OAJD,SAIU;AACRb,QAAAA,kBAAkB,CAACY,2BAAnB,GAAiD,IAAjD;AACD,OAZ4C,CAc7C;AACA;;;AACA,UAAIb,YAAY,CAACe,cAAb,CAA4BR,QAA5B,CAAJ,EAA2C;AACzCA,QAAAA,QAAQ,GAAG,IAAIA,QAAQ,CAACI,IAAb,CAAkBJ,QAAQ,CAACO,KAA3B,CAAX;AACD;;AAED,UAAIE,MAAM,GAAGT,QAAQ,CAACS,MAAtB;;AACA,UAAI,CAACA,MAAL,EAAa;AACX;AACA;AACA;AACAX,QAAAA,OAAO,GAAGF,mBAAmB,CAACc,iBAApB,EAAV;AACD,OALD,MAKO;AACL,YAAID,MAAM,CAACE,eAAP,IAA0B,CAACF,MAAM,CAACG,sBAAP,EAA/B,EAAgE;AAC9D;AACA;AACA;AACAH,UAAAA,MAAM,CAACI,kBAAP,CACEjB,mBAAmB,CAACc,iBADtB;AAGD;;AACDV,QAAAA,QAAQ,CAACc,SAAT,CAAmBhB,OAAnB;AACA,eAAOE,QAAP;AACD;AACF;AACF,GAlD8D,CAoD/D;;;AACA,MAAI,OAAOF,OAAO,CAACM,IAAf,KAAwB,QAA5B,EAAsC;AACpCJ,IAAAA,QAAQ,GAAGL,oBAAoB,CAACoB,oBAArB,CACTjB,OAAO,CAACM,IADC,EAETN,OAAO,CAACS,KAFC,EAGTR,mBAHS,CAAX;AAKD,GAND,MAMO;AACL;AACAC,IAAAA,QAAQ,GAAG,IAAIF,OAAO,CAACM,IAAZ,CAAiBN,OAAO,CAACS,KAAzB,CAAX;AACD;;AAED,MAAI,iBAAiBN,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;AACxC,qBAAiBF,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,OAAO,CAC9C,OAAOS,QAAQ,CAACc,SAAhB,KAA8B,UAA9B,IACA,OAAOd,QAAQ,CAACgB,cAAhB,KAAmC,UADnC,IAEA,OAAOhB,QAAQ,CAACiB,gBAAhB,KAAqC,UAHS,EAI9C,uCAJ8C,CAA/C,GAKG,IALJ;AAMD,GAvE8D,CAyE/D;AACA;;;AACAjB,EAAAA,QAAQ,CAACc,SAAT,CAAmBhB,OAAnB;AAEA,SAAOE,QAAP;AACD;;AAEDkB,MAAM,CAACC,OAAP,GAAiBtB,yBAAjB","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule instantiateReactComponent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar warning = require(\"./warning\");\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactLegacyElement = require(\"./ReactLegacyElement\");\nvar ReactNativeComponent = require(\"./ReactNativeComponent\");\nvar ReactEmptyComponent = require(\"./ReactEmptyComponent\");\n\n/**\n * Given an `element` create an instance that will actually be mounted.\n *\n * @param {object} element\n * @param {*} parentCompositeType The composite type that resolved this.\n * @return {object} A new instance of the element's constructor.\n * @protected\n */\nfunction instantiateReactComponent(element, parentCompositeType) {\n  var instance;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      element && (typeof element.type === 'function' ||\n                     typeof element.type === 'string'),\n      'Only functions or strings can be mounted as React components.'\n    ) : null);\n\n    // Resolve mock instances\n    if (element.type._mockedReactClassConstructor) {\n      // If this is a mocked class, we treat the legacy factory as if it was the\n      // class constructor for future proofing unit tests. Because this might\n      // be mocked as a legacy factory, we ignore any warnings triggerd by\n      // this temporary hack.\n      ReactLegacyElement._isLegacyCallWarningEnabled = false;\n      try {\n        instance = new element.type._mockedReactClassConstructor(\n          element.props\n        );\n      } finally {\n        ReactLegacyElement._isLegacyCallWarningEnabled = true;\n      }\n\n      // If the mock implementation was a legacy factory, then it returns a\n      // element. We need to turn this into a real component instance.\n      if (ReactElement.isValidElement(instance)) {\n        instance = new instance.type(instance.props);\n      }\n\n      var render = instance.render;\n      if (!render) {\n        // For auto-mocked factories, the prototype isn't shimmed and therefore\n        // there is no render function on the instance. We replace the whole\n        // component with an empty component instance instead.\n        element = ReactEmptyComponent.getEmptyComponent();\n      } else {\n        if (render._isMockFunction && !render._getMockImplementation()) {\n          // Auto-mocked components may have a prototype with a mocked render\n          // function. For those, we'll need to mock the result of the render\n          // since we consider undefined to be invalid results from render.\n          render.mockImplementation(\n            ReactEmptyComponent.getEmptyComponent\n          );\n        }\n        instance.construct(element);\n        return instance;\n      }\n    }\n  }\n\n  // Special case string values\n  if (typeof element.type === 'string') {\n    instance = ReactNativeComponent.createInstanceForTag(\n      element.type,\n      element.props,\n      parentCompositeType\n    );\n  } else {\n    // Normal case for non-mocks and non-strings\n    instance = new element.type(element.props);\n  }\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      typeof instance.construct === 'function' &&\n      typeof instance.mountComponent === 'function' &&\n      typeof instance.receiveComponent === 'function',\n      'Only React Components can be mounted.'\n    ) : null);\n  }\n\n  // This actually sets up the internal instance. This will become decoupled\n  // from the public instance in a future diff.\n  instance.construct(element);\n\n  return instance;\n}\n\nmodule.exports = instantiateReactComponent;\n"]},"metadata":{},"sourceType":"script"}