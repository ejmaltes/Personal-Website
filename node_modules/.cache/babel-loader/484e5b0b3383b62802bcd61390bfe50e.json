{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule update\n */\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar invariant = require(\"./invariant\");\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat();\n  } else if (x && typeof x === 'object') {\n    return assign(new x.constructor(), x);\n  } else {\n    return x;\n  }\n}\n\nvar COMMAND_PUSH = keyOf({\n  $push: null\n});\nvar COMMAND_UNSHIFT = keyOf({\n  $unshift: null\n});\nvar COMMAND_SPLICE = keyOf({\n  $splice: null\n});\nvar COMMAND_SET = keyOf({\n  $set: null\n});\nvar COMMAND_MERGE = keyOf({\n  $merge: null\n});\nvar COMMAND_APPLY = keyOf({\n  $apply: null\n});\nvar ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];\nvar ALL_COMMANDS_SET = {};\nALL_COMMANDS_LIST.forEach(function (command) {\n  ALL_COMMANDS_SET[command] = true;\n});\n\nfunction invariantArrayCase(value, spec, command) {\n  \"production\" !== process.env.NODE_ENV ? invariant(Array.isArray(value), 'update(): expected target of %s to be an array; got %s.', command, value) : invariant(Array.isArray(value));\n  var specValue = spec[command];\n  \"production\" !== process.env.NODE_ENV ? invariant(Array.isArray(specValue), 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue) : invariant(Array.isArray(specValue));\n}\n\nfunction update(value, spec) {\n  \"production\" !== process.env.NODE_ENV ? invariant(typeof spec === 'object', 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : invariant(typeof spec === 'object');\n\n  if (spec.hasOwnProperty(COMMAND_SET)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(Object.keys(spec).length === 1, 'Cannot have more than one key in an object with %s', COMMAND_SET) : invariant(Object.keys(spec).length === 1);\n    return spec[COMMAND_SET];\n  }\n\n  var nextValue = shallowCopy(value);\n\n  if (spec.hasOwnProperty(COMMAND_MERGE)) {\n    var mergeObj = spec[COMMAND_MERGE];\n    \"production\" !== process.env.NODE_ENV ? invariant(mergeObj && typeof mergeObj === 'object', 'update(): %s expects a spec of type \\'object\\'; got %s', COMMAND_MERGE, mergeObj) : invariant(mergeObj && typeof mergeObj === 'object');\n    \"production\" !== process.env.NODE_ENV ? invariant(nextValue && typeof nextValue === 'object', 'update(): %s expects a target of type \\'object\\'; got %s', COMMAND_MERGE, nextValue) : invariant(nextValue && typeof nextValue === 'object');\n    assign(nextValue, spec[COMMAND_MERGE]);\n  }\n\n  if (spec.hasOwnProperty(COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH);\n    spec[COMMAND_PUSH].forEach(function (item) {\n      nextValue.push(item);\n    });\n  }\n\n  if (spec.hasOwnProperty(COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT);\n    spec[COMMAND_UNSHIFT].forEach(function (item) {\n      nextValue.unshift(item);\n    });\n  }\n\n  if (spec.hasOwnProperty(COMMAND_SPLICE)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(Array.isArray(value), 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value) : invariant(Array.isArray(value));\n    \"production\" !== process.env.NODE_ENV ? invariant(Array.isArray(spec[COMMAND_SPLICE]), 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(Array.isArray(spec[COMMAND_SPLICE]));\n    spec[COMMAND_SPLICE].forEach(function (args) {\n      \"production\" !== process.env.NODE_ENV ? invariant(Array.isArray(args), 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : invariant(Array.isArray(args));\n      nextValue.splice.apply(nextValue, args);\n    });\n  }\n\n  if (spec.hasOwnProperty(COMMAND_APPLY)) {\n    \"production\" !== process.env.NODE_ENV ? invariant(typeof spec[COMMAND_APPLY] === 'function', 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]) : invariant(typeof spec[COMMAND_APPLY] === 'function');\n    nextValue = spec[COMMAND_APPLY](nextValue);\n  }\n\n  for (var k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k]);\n    }\n  }\n\n  return nextValue;\n}\n\nmodule.exports = update;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/update.js"],"names":["assign","require","keyOf","invariant","shallowCopy","x","Array","isArray","concat","constructor","COMMAND_PUSH","$push","COMMAND_UNSHIFT","$unshift","COMMAND_SPLICE","$splice","COMMAND_SET","$set","COMMAND_MERGE","$merge","COMMAND_APPLY","$apply","ALL_COMMANDS_LIST","ALL_COMMANDS_SET","forEach","command","invariantArrayCase","value","spec","process","env","NODE_ENV","specValue","update","join","hasOwnProperty","Object","keys","length","nextValue","mergeObj","item","push","unshift","args","splice","apply","k","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule update\n */\n\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\nvar keyOf = require(\"./keyOf\");\nvar invariant = require(\"./invariant\");\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat();\n  } else if (x && typeof x === 'object') {\n    return assign(new x.constructor(), x);\n  } else {\n    return x;\n  }\n}\n\nvar COMMAND_PUSH = keyOf({$push: null});\nvar COMMAND_UNSHIFT = keyOf({$unshift: null});\nvar COMMAND_SPLICE = keyOf({$splice: null});\nvar COMMAND_SET = keyOf({$set: null});\nvar COMMAND_MERGE = keyOf({$merge: null});\nvar COMMAND_APPLY = keyOf({$apply: null});\n\nvar ALL_COMMANDS_LIST = [\n  COMMAND_PUSH,\n  COMMAND_UNSHIFT,\n  COMMAND_SPLICE,\n  COMMAND_SET,\n  COMMAND_MERGE,\n  COMMAND_APPLY\n];\n\nvar ALL_COMMANDS_SET = {};\n\nALL_COMMANDS_LIST.forEach(function(command) {\n  ALL_COMMANDS_SET[command] = true;\n});\n\nfunction invariantArrayCase(value, spec, command) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array; got %s.',\n    command,\n    value\n  ) : invariant(Array.isArray(value)));\n  var specValue = spec[command];\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    Array.isArray(specValue),\n    'update(): expected spec of %s to be an array; got %s. ' +\n    'Did you forget to wrap your parameter in an array?',\n    command,\n    specValue\n  ) : invariant(Array.isArray(specValue)));\n}\n\nfunction update(value, spec) {\n  (\"production\" !== process.env.NODE_ENV ? invariant(\n    typeof spec === 'object',\n    'update(): You provided a key path to update() that did not contain one ' +\n    'of %s. Did you forget to include {%s: ...}?',\n    ALL_COMMANDS_LIST.join(', '),\n    COMMAND_SET\n  ) : invariant(typeof spec === 'object'));\n\n  if (spec.hasOwnProperty(COMMAND_SET)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Object.keys(spec).length === 1,\n      'Cannot have more than one key in an object with %s',\n      COMMAND_SET\n    ) : invariant(Object.keys(spec).length === 1));\n\n    return spec[COMMAND_SET];\n  }\n\n  var nextValue = shallowCopy(value);\n\n  if (spec.hasOwnProperty(COMMAND_MERGE)) {\n    var mergeObj = spec[COMMAND_MERGE];\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      mergeObj && typeof mergeObj === 'object',\n      'update(): %s expects a spec of type \\'object\\'; got %s',\n      COMMAND_MERGE,\n      mergeObj\n    ) : invariant(mergeObj && typeof mergeObj === 'object'));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      nextValue && typeof nextValue === 'object',\n      'update(): %s expects a target of type \\'object\\'; got %s',\n      COMMAND_MERGE,\n      nextValue\n    ) : invariant(nextValue && typeof nextValue === 'object'));\n    assign(nextValue, spec[COMMAND_MERGE]);\n  }\n\n  if (spec.hasOwnProperty(COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH);\n    spec[COMMAND_PUSH].forEach(function(item) {\n      nextValue.push(item);\n    });\n  }\n\n  if (spec.hasOwnProperty(COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT);\n    spec[COMMAND_UNSHIFT].forEach(function(item) {\n      nextValue.unshift(item);\n    });\n  }\n\n  if (spec.hasOwnProperty(COMMAND_SPLICE)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Array.isArray(value),\n      'Expected %s target to be an array; got %s',\n      COMMAND_SPLICE,\n      value\n    ) : invariant(Array.isArray(value)));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      Array.isArray(spec[COMMAND_SPLICE]),\n      'update(): expected spec of %s to be an array of arrays; got %s. ' +\n      'Did you forget to wrap your parameters in an array?',\n      COMMAND_SPLICE,\n      spec[COMMAND_SPLICE]\n    ) : invariant(Array.isArray(spec[COMMAND_SPLICE])));\n    spec[COMMAND_SPLICE].forEach(function(args) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        Array.isArray(args),\n        'update(): expected spec of %s to be an array of arrays; got %s. ' +\n        'Did you forget to wrap your parameters in an array?',\n        COMMAND_SPLICE,\n        spec[COMMAND_SPLICE]\n      ) : invariant(Array.isArray(args)));\n      nextValue.splice.apply(nextValue, args);\n    });\n  }\n\n  if (spec.hasOwnProperty(COMMAND_APPLY)) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      typeof spec[COMMAND_APPLY] === 'function',\n      'update(): expected spec of %s to be a function; got %s.',\n      COMMAND_APPLY,\n      spec[COMMAND_APPLY]\n    ) : invariant(typeof spec[COMMAND_APPLY] === 'function'));\n    nextValue = spec[COMMAND_APPLY](nextValue);\n  }\n\n  for (var k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k]);\n    }\n  }\n\n  return nextValue;\n}\n\nmodule.exports = update;\n"]},"metadata":{},"sourceType":"script"}