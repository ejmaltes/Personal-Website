{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\"use strict\";\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\n\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function (objName, fnName, func) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var measuredFunc = null;\n\n      var wrapper = function () {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n\n          return measuredFunc.apply(this, arguments);\n        }\n\n        return func.apply(this, arguments);\n      };\n\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n\n    return func;\n  },\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function (measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\n\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/ReactPerf.js"],"names":["ReactPerf","enableMeasure","storedMeasure","_noMeasure","measure","objName","fnName","func","process","env","NODE_ENV","measuredFunc","wrapper","apply","arguments","displayName","injection","injectMeasure","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;AAEA;;;;;AAIA,IAAIA,SAAS,GAAG;AACd;;;;AAIAC,EAAAA,aAAa,EAAE,KALD;;AAOd;;;;AAIAC,EAAAA,aAAa,EAAEC,UAXD;;AAad;;;;;;;;AAQAC,EAAAA,OAAO,EAAE,UAASC,OAAT,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgC;AACvC,QAAI,iBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;AACzC,UAAIC,YAAY,GAAG,IAAnB;;AACA,UAAIC,OAAO,GAAG,YAAW;AACvB,YAAIZ,SAAS,CAACC,aAAd,EAA6B;AAC3B,cAAI,CAACU,YAAL,EAAmB;AACjBA,YAAAA,YAAY,GAAGX,SAAS,CAACE,aAAV,CAAwBG,OAAxB,EAAiCC,MAAjC,EAAyCC,IAAzC,CAAf;AACD;;AACD,iBAAOI,YAAY,CAACE,KAAb,CAAmB,IAAnB,EAAyBC,SAAzB,CAAP;AACD;;AACD,eAAOP,IAAI,CAACM,KAAL,CAAW,IAAX,EAAiBC,SAAjB,CAAP;AACD,OARD;;AASAF,MAAAA,OAAO,CAACG,WAAR,GAAsBV,OAAO,GAAG,GAAV,GAAgBC,MAAtC;AACA,aAAOM,OAAP;AACD;;AACD,WAAOL,IAAP;AACD,GArCa;AAuCdS,EAAAA,SAAS,EAAE;AACT;;;AAGAC,IAAAA,aAAa,EAAE,UAASb,OAAT,EAAkB;AAC/BJ,MAAAA,SAAS,CAACE,aAAV,GAA0BE,OAA1B;AACD;AANQ;AAvCG,CAAhB;AAiDA;;;;;;;;;AAQA,SAASD,UAAT,CAAoBE,OAApB,EAA6BC,MAA7B,EAAqCC,IAArC,EAA2C;AACzC,SAAOA,IAAP;AACD;;AAEDW,MAAM,CAACC,OAAP,GAAiBnB,SAAjB","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n\"use strict\";\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function(objName, fnName, func) {\n    if (\"production\" !== process.env.NODE_ENV) {\n      var measuredFunc = null;\n      var wrapper = function() {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function(measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;\n"]},"metadata":{},"sourceType":"script"}