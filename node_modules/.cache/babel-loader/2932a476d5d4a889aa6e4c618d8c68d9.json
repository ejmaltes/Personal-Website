{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n/*jslint evil: true, sub: true */\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar createNodesFromMarkup = require(\"./createNodesFromMarkup\");\n\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar getMarkupWrap = require(\"./getMarkupWrap\");\n\nvar invariant = require(\"./invariant\");\n\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\n\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\n\nvar Danger = {\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function (markupList) {\n    \"production\" !== process.env.NODE_ENV ? invariant(ExecutionEnvironment.canUseDOM, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'React.renderToString for server rendering.') : invariant(ExecutionEnvironment.canUseDOM);\n    var nodeName;\n    var markupByNodeName = {}; // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n\n    for (var i = 0; i < markupList.length; i++) {\n      \"production\" !== process.env.NODE_ENV ? invariant(markupList[i], 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(markupList[i]);\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n\n      var markupListByNodeName = markupByNodeName[nodeName]; // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n\n      for (var resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex]; // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n\n          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP, // This index will be parsed back out below.\n          '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" ');\n        }\n      } // Render each group of markup with similar wrapping `nodeName`.\n\n\n      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.\n      );\n\n      for (i = 0; i < renderNodes.length; ++i) {\n        var renderNode = renderNodes[i];\n\n        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n          \"production\" !== process.env.NODE_ENV ? invariant(!resultList.hasOwnProperty(resultIndex), 'Danger: Assigning to an already-occupied result index.') : invariant(!resultList.hasOwnProperty(resultIndex));\n          resultList[resultIndex] = renderNode; // This should match resultList.length and markupList.length when\n          // we're done.\n\n          resultListAssignmentCount += 1;\n        } else if (\"production\" !== process.env.NODE_ENV) {\n          console.error(\"Danger: Discarding unexpected node:\", renderNode);\n        }\n      }\n    } // Although resultList was populated out of order, it should now be a dense\n    // array.\n\n\n    \"production\" !== process.env.NODE_ENV ? invariant(resultListAssignmentCount === resultList.length, 'Danger: Did not assign to every index of resultList.') : invariant(resultListAssignmentCount === resultList.length);\n    \"production\" !== process.env.NODE_ENV ? invariant(resultList.length === markupList.length, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(resultList.length === markupList.length);\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    \"production\" !== process.env.NODE_ENV ? invariant(ExecutionEnvironment.canUseDOM, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'React.renderToString for server rendering.') : invariant(ExecutionEnvironment.canUseDOM);\n    \"production\" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup);\n    \"production\" !== process.env.NODE_ENV ? invariant(oldChild.tagName.toLowerCase() !== 'html', 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See renderComponentToString().') : invariant(oldChild.tagName.toLowerCase() !== 'html');\n    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n};\nmodule.exports = Danger;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/Danger.js"],"names":["ExecutionEnvironment","require","createNodesFromMarkup","emptyFunction","getMarkupWrap","invariant","OPEN_TAG_NAME_EXP","RESULT_INDEX_ATTR","getNodeName","markup","substring","indexOf","Danger","dangerouslyRenderMarkup","markupList","process","env","NODE_ENV","canUseDOM","nodeName","markupByNodeName","i","length","resultList","resultListAssignmentCount","hasOwnProperty","markupListByNodeName","resultIndex","replace","renderNodes","join","renderNode","hasAttribute","getAttribute","removeAttribute","console","error","dangerouslyReplaceNodeWithMarkup","oldChild","tagName","toLowerCase","newChild","parentNode","replaceChild","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAYA;AAEA;;AAEA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAAlC;;AAEA,IAAIC,qBAAqB,GAAGD,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIK,iBAAiB,GAAG,cAAxB;AACA,IAAIC,iBAAiB,GAAG,mBAAxB;AAEA;;;;;;;;;;;;AAWA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAOA,MAAM,CAACC,SAAP,CAAiB,CAAjB,EAAoBD,MAAM,CAACE,OAAP,CAAe,GAAf,CAApB,CAAP;AACD;;AAED,IAAIC,MAAM,GAAG;AAEX;;;;;;;;;AASAC,EAAAA,uBAAuB,EAAE,UAASC,UAAT,EAAqB;AAC3C,qBAAiBC,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,SAAS,CAChDL,oBAAoB,CAACkB,SAD2B,EAEhD,oEACA,mEADA,GAEA,kDAFA,GAGA,4CALgD,CAAjD,GAMGb,SAAS,CAACL,oBAAoB,CAACkB,SAAtB,CANb;AAOA,QAAIC,QAAJ;AACA,QAAIC,gBAAgB,GAAG,EAAvB,CAT4C,CAU5C;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAAU,CAACQ,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACzC,uBAAiBN,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,SAAS,CAChDS,UAAU,CAACO,CAAD,CADsC,EAEhD,+CAFgD,CAAjD,GAGGhB,SAAS,CAACS,UAAU,CAACO,CAAD,CAAX,CAHb;AAIAF,MAAAA,QAAQ,GAAGX,WAAW,CAACM,UAAU,CAACO,CAAD,CAAX,CAAtB;AACAF,MAAAA,QAAQ,GAAGf,aAAa,CAACe,QAAD,CAAb,GAA0BA,QAA1B,GAAqC,GAAhD;AACAC,MAAAA,gBAAgB,CAACD,QAAD,CAAhB,GAA6BC,gBAAgB,CAACD,QAAD,CAAhB,IAA8B,EAA3D;AACAC,MAAAA,gBAAgB,CAACD,QAAD,CAAhB,CAA2BE,CAA3B,IAAgCP,UAAU,CAACO,CAAD,CAA1C;AACD;;AACD,QAAIE,UAAU,GAAG,EAAjB;AACA,QAAIC,yBAAyB,GAAG,CAAhC;;AACA,SAAKL,QAAL,IAAiBC,gBAAjB,EAAmC;AACjC,UAAI,CAACA,gBAAgB,CAACK,cAAjB,CAAgCN,QAAhC,CAAL,EAAgD;AAC9C;AACD;;AACD,UAAIO,oBAAoB,GAAGN,gBAAgB,CAACD,QAAD,CAA3C,CAJiC,CAMjC;AACA;AACA;;AACA,WAAK,IAAIQ,WAAT,IAAwBD,oBAAxB,EAA8C;AAC5C,YAAIA,oBAAoB,CAACD,cAArB,CAAoCE,WAApC,CAAJ,EAAsD;AACpD,cAAIlB,MAAM,GAAGiB,oBAAoB,CAACC,WAAD,CAAjC,CADoD,CAGpD;AACA;AACA;;AACAD,UAAAA,oBAAoB,CAACC,WAAD,CAApB,GAAoClB,MAAM,CAACmB,OAAP,CAClCtB,iBADkC,EAElC;AACA,kBAAQC,iBAAR,GAA4B,IAA5B,GAAmCoB,WAAnC,GAAiD,IAHf,CAApC;AAKD;AACF,OAtBgC,CAwBjC;;;AACA,UAAIE,WAAW,GAAG3B,qBAAqB,CACrCwB,oBAAoB,CAACI,IAArB,CAA0B,EAA1B,CADqC,EAErC3B,aAFqC,CAEvB;AAFuB,OAAvC;;AAKA,WAAKkB,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGQ,WAAW,CAACP,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACvC,YAAIU,UAAU,GAAGF,WAAW,CAACR,CAAD,CAA5B;;AACA,YAAIU,UAAU,CAACC,YAAX,IACAD,UAAU,CAACC,YAAX,CAAwBzB,iBAAxB,CADJ,EACgD;AAE9CoB,UAAAA,WAAW,GAAG,CAACI,UAAU,CAACE,YAAX,CAAwB1B,iBAAxB,CAAf;AACAwB,UAAAA,UAAU,CAACG,eAAX,CAA2B3B,iBAA3B;AAEC,2BAAiBQ,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,SAAS,CAChD,CAACkB,UAAU,CAACE,cAAX,CAA0BE,WAA1B,CAD+C,EAEhD,wDAFgD,CAAjD,GAGGtB,SAAS,CAAC,CAACkB,UAAU,CAACE,cAAX,CAA0BE,WAA1B,CAAF,CAHb;AAKAJ,UAAAA,UAAU,CAACI,WAAD,CAAV,GAA0BI,UAA1B,CAV8C,CAY9C;AACA;;AACAP,UAAAA,yBAAyB,IAAI,CAA7B;AAED,SAjBD,MAiBO,IAAI,iBAAiBT,OAAO,CAACC,GAAR,CAAYC,QAAjC,EAA2C;AAChDkB,UAAAA,OAAO,CAACC,KAAR,CACE,qCADF,EAEEL,UAFF;AAID;AACF;AACF,KA/E2C,CAiF5C;AACA;;;AACC,qBAAiBhB,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,SAAS,CAChDmB,yBAAyB,KAAKD,UAAU,CAACD,MADO,EAEhD,sDAFgD,CAAjD,GAGGjB,SAAS,CAACmB,yBAAyB,KAAKD,UAAU,CAACD,MAA1C,CAHb;AAKC,qBAAiBP,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,SAAS,CAChDkB,UAAU,CAACD,MAAX,KAAsBR,UAAU,CAACQ,MADe,EAEhD,8DAFgD,EAGhDR,UAAU,CAACQ,MAHqC,EAIhDC,UAAU,CAACD,MAJqC,CAAjD,GAKGjB,SAAS,CAACkB,UAAU,CAACD,MAAX,KAAsBR,UAAU,CAACQ,MAAlC,CALb;AAOA,WAAOC,UAAP;AACD,GA3GU;;AA6GX;;;;;;;;AAQAc,EAAAA,gCAAgC,EAAE,UAASC,QAAT,EAAmB7B,MAAnB,EAA2B;AAC1D,qBAAiBM,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,SAAS,CAChDL,oBAAoB,CAACkB,SAD2B,EAEhD,sEACA,iEADA,GAEA,2DAFA,GAGA,4CALgD,CAAjD,GAMGb,SAAS,CAACL,oBAAoB,CAACkB,SAAtB,CANb;AAOC,qBAAiBH,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,SAAS,CAACI,MAAD,EAAS,wDAAT,CAAjD,GAAsHJ,SAAS,CAACI,MAAD,CAAhI;AACC,qBAAiBM,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCZ,SAAS,CAChDiC,QAAQ,CAACC,OAAT,CAAiBC,WAAjB,OAAmC,MADa,EAEhD,yEACA,mEADA,GAEA,8DAFA,GAGA,kDALgD,CAAjD,GAMGnC,SAAS,CAACiC,QAAQ,CAACC,OAAT,CAAiBC,WAAjB,OAAmC,MAApC,CANb;AAQA,QAAIC,QAAQ,GAAGvC,qBAAqB,CAACO,MAAD,EAASN,aAAT,CAArB,CAA6C,CAA7C,CAAf;AACAmC,IAAAA,QAAQ,CAACI,UAAT,CAAoBC,YAApB,CAAiCF,QAAjC,EAA2CH,QAA3C;AACD;AAxIU,CAAb;AA4IAM,MAAM,CAACC,OAAP,GAAiBjC,MAAjB","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Danger\n * @typechecks static-only\n */\n\n/*jslint evil: true, sub: true */\n\n\"use strict\";\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar createNodesFromMarkup = require(\"./createNodesFromMarkup\");\nvar emptyFunction = require(\"./emptyFunction\");\nvar getMarkupWrap = require(\"./getMarkupWrap\");\nvar invariant = require(\"./invariant\");\n\nvar OPEN_TAG_NAME_EXP = /^(<[^ \\/>]+)/;\nvar RESULT_INDEX_ATTR = 'data-danger-index';\n\n/**\n * Extracts the `nodeName` from a string of markup.\n *\n * NOTE: Extracting the `nodeName` does not require a regular expression match\n * because we make assumptions about React-generated markup (i.e. there are no\n * spaces surrounding the opening tag and there is at least one attribute).\n *\n * @param {string} markup String of markup.\n * @return {string} Node name of the supplied markup.\n * @see http://jsperf.com/extract-nodename\n */\nfunction getNodeName(markup) {\n  return markup.substring(1, markup.indexOf(' '));\n}\n\nvar Danger = {\n\n  /**\n   * Renders markup into an array of nodes. The markup is expected to render\n   * into a list of root nodes. Also, the length of `resultList` and\n   * `markupList` should be the same.\n   *\n   * @param {array<string>} markupList List of markup strings to render.\n   * @return {array<DOMElement>} List of rendered nodes.\n   * @internal\n   */\n  dangerouslyRenderMarkup: function(markupList) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +\n      'thread. Make sure `window` and `document` are available globally ' +\n      'before requiring React when unit testing or use ' +\n      'React.renderToString for server rendering.'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    var nodeName;\n    var markupByNodeName = {};\n    // Group markup by `nodeName` if a wrap is necessary, else by '*'.\n    for (var i = 0; i < markupList.length; i++) {\n      (\"production\" !== process.env.NODE_ENV ? invariant(\n        markupList[i],\n        'dangerouslyRenderMarkup(...): Missing markup.'\n      ) : invariant(markupList[i]));\n      nodeName = getNodeName(markupList[i]);\n      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';\n      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];\n      markupByNodeName[nodeName][i] = markupList[i];\n    }\n    var resultList = [];\n    var resultListAssignmentCount = 0;\n    for (nodeName in markupByNodeName) {\n      if (!markupByNodeName.hasOwnProperty(nodeName)) {\n        continue;\n      }\n      var markupListByNodeName = markupByNodeName[nodeName];\n\n      // This for-in loop skips the holes of the sparse array. The order of\n      // iteration should follow the order of assignment, which happens to match\n      // numerical index order, but we don't rely on that.\n      for (var resultIndex in markupListByNodeName) {\n        if (markupListByNodeName.hasOwnProperty(resultIndex)) {\n          var markup = markupListByNodeName[resultIndex];\n\n          // Push the requested markup with an additional RESULT_INDEX_ATTR\n          // attribute.  If the markup does not start with a < character, it\n          // will be discarded below (with an appropriate console.error).\n          markupListByNodeName[resultIndex] = markup.replace(\n            OPEN_TAG_NAME_EXP,\n            // This index will be parsed back out below.\n            '$1 ' + RESULT_INDEX_ATTR + '=\"' + resultIndex + '\" '\n          );\n        }\n      }\n\n      // Render each group of markup with similar wrapping `nodeName`.\n      var renderNodes = createNodesFromMarkup(\n        markupListByNodeName.join(''),\n        emptyFunction // Do nothing special with <script> tags.\n      );\n\n      for (i = 0; i < renderNodes.length; ++i) {\n        var renderNode = renderNodes[i];\n        if (renderNode.hasAttribute &&\n            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {\n\n          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);\n          renderNode.removeAttribute(RESULT_INDEX_ATTR);\n\n          (\"production\" !== process.env.NODE_ENV ? invariant(\n            !resultList.hasOwnProperty(resultIndex),\n            'Danger: Assigning to an already-occupied result index.'\n          ) : invariant(!resultList.hasOwnProperty(resultIndex)));\n\n          resultList[resultIndex] = renderNode;\n\n          // This should match resultList.length and markupList.length when\n          // we're done.\n          resultListAssignmentCount += 1;\n\n        } else if (\"production\" !== process.env.NODE_ENV) {\n          console.error(\n            \"Danger: Discarding unexpected node:\",\n            renderNode\n          );\n        }\n      }\n    }\n\n    // Although resultList was populated out of order, it should now be a dense\n    // array.\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      resultListAssignmentCount === resultList.length,\n      'Danger: Did not assign to every index of resultList.'\n    ) : invariant(resultListAssignmentCount === resultList.length));\n\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      resultList.length === markupList.length,\n      'Danger: Expected markup to render %s nodes, but rendered %s.',\n      markupList.length,\n      resultList.length\n    ) : invariant(resultList.length === markupList.length));\n\n    return resultList;\n  },\n\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +\n      'worker thread. Make sure `window` and `document` are available ' +\n      'globally before requiring React when unit testing or use ' +\n      'React.renderToString for server rendering.'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    (\"production\" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      oldChild.tagName.toLowerCase() !== 'html',\n      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +\n      '<html> node. This is because browser quirks make this unreliable ' +\n      'and/or slow. If you want to render to the root you must use ' +\n      'server rendering. See renderComponentToString().'\n    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));\n\n    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n    oldChild.parentNode.replaceChild(newChild, oldChild);\n  }\n\n};\n\nmodule.exports = Danger;\n"]},"metadata":{},"sourceType":"script"}