{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactStateSetters\n */\n\"use strict\";\n\nvar ReactStateSetters = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function (component, funcReturningState) {\n    return function (a, b, c, d, e, f) {\n      var partialState = funcReturningState.call(component, a, b, c, d, e, f);\n\n      if (partialState) {\n        component.setState(partialState);\n      }\n    };\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function (component, key) {\n    // Memoize the setters.\n    var cache = component.__keySetters || (component.__keySetters = {});\n    return cache[key] || (cache[key] = createStateKeySetter(component, key));\n  }\n};\n\nfunction createStateKeySetter(component, key) {\n  // Partial state is allocated outside of the function closure so it can be\n  // reused with every call, avoiding memory allocation when this function\n  // is called.\n  var partialState = {};\n  return function stateKeySetter(value) {\n    partialState[key] = value;\n    component.setState(partialState);\n  };\n}\n\nReactStateSetters.Mixin = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateSetter(function(xValue) {\n   *     return {x: xValue};\n   *   })(1);\n   *\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function (funcReturningState) {\n    return ReactStateSetters.createStateSetter(this, funcReturningState);\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateKeySetter('x')(1);\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function (key) {\n    return ReactStateSetters.createStateKeySetter(this, key);\n  }\n};\nmodule.exports = ReactStateSetters;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/ReactStateSetters.js"],"names":["ReactStateSetters","createStateSetter","component","funcReturningState","a","b","c","d","e","f","partialState","call","setState","createStateKeySetter","key","cache","__keySetters","stateKeySetter","value","Mixin","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,iBAAiB,GAAG;AACtB;;;;;;;;;;AAUAC,EAAAA,iBAAiB,EAAE,UAASC,SAAT,EAAoBC,kBAApB,EAAwC;AACzD,WAAO,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;AAChC,UAAIC,YAAY,GAAGP,kBAAkB,CAACQ,IAAnB,CAAwBT,SAAxB,EAAmCE,CAAnC,EAAsCC,CAAtC,EAAyCC,CAAzC,EAA4CC,CAA5C,EAA+CC,CAA/C,EAAkDC,CAAlD,CAAnB;;AACA,UAAIC,YAAJ,EAAkB;AAChBR,QAAAA,SAAS,CAACU,QAAV,CAAmBF,YAAnB;AACD;AACF,KALD;AAMD,GAlBqB;;AAoBtB;;;;;;;;;;;AAWAG,EAAAA,oBAAoB,EAAE,UAASX,SAAT,EAAoBY,GAApB,EAAyB;AAC7C;AACA,QAAIC,KAAK,GAAGb,SAAS,CAACc,YAAV,KAA2Bd,SAAS,CAACc,YAAV,GAAyB,EAApD,CAAZ;AACA,WAAOD,KAAK,CAACD,GAAD,CAAL,KAAeC,KAAK,CAACD,GAAD,CAAL,GAAaD,oBAAoB,CAACX,SAAD,EAAYY,GAAZ,CAAhD,CAAP;AACD;AAnCqB,CAAxB;;AAsCA,SAASD,oBAAT,CAA8BX,SAA9B,EAAyCY,GAAzC,EAA8C;AAC5C;AACA;AACA;AACA,MAAIJ,YAAY,GAAG,EAAnB;AACA,SAAO,SAASO,cAAT,CAAwBC,KAAxB,EAA+B;AACpCR,IAAAA,YAAY,CAACI,GAAD,CAAZ,GAAoBI,KAApB;AACAhB,IAAAA,SAAS,CAACU,QAAV,CAAmBF,YAAnB;AACD,GAHD;AAID;;AAEDV,iBAAiB,CAACmB,KAAlB,GAA0B;AACxB;;;;;;;;;;;;;;;;AAgBAlB,EAAAA,iBAAiB,EAAE,UAASE,kBAAT,EAA6B;AAC9C,WAAOH,iBAAiB,CAACC,iBAAlB,CAAoC,IAApC,EAA0CE,kBAA1C,CAAP;AACD,GAnBuB;;AAqBxB;;;;;;;;;;;;;;;AAeAU,EAAAA,oBAAoB,EAAE,UAASC,GAAT,EAAc;AAClC,WAAOd,iBAAiB,CAACa,oBAAlB,CAAuC,IAAvC,EAA6CC,GAA7C,CAAP;AACD;AAtCuB,CAA1B;AAyCAM,MAAM,CAACC,OAAP,GAAiBrB,iBAAjB","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactStateSetters\n */\n\n\"use strict\";\n\nvar ReactStateSetters = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function(component, funcReturningState) {\n    return function(a, b, c, d, e, f) {\n      var partialState = funcReturningState.call(component, a, b, c, d, e, f);\n      if (partialState) {\n        component.setState(partialState);\n      }\n    };\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function(component, key) {\n    // Memoize the setters.\n    var cache = component.__keySetters || (component.__keySetters = {});\n    return cache[key] || (cache[key] = createStateKeySetter(component, key));\n  }\n};\n\nfunction createStateKeySetter(component, key) {\n  // Partial state is allocated outside of the function closure so it can be\n  // reused with every call, avoiding memory allocation when this function\n  // is called.\n  var partialState = {};\n  return function stateKeySetter(value) {\n    partialState[key] = value;\n    component.setState(partialState);\n  };\n}\n\nReactStateSetters.Mixin = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateSetter(function(xValue) {\n   *     return {x: xValue};\n   *   })(1);\n   *\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function(funcReturningState) {\n    return ReactStateSetters.createStateSetter(this, funcReturningState);\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateKeySetter('x')(1);\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function(key) {\n    return ReactStateSetters.createStateKeySetter(this, key);\n  }\n};\n\nmodule.exports = ReactStateSetters;\n"]},"metadata":{},"sourceType":"script"}