{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule cx\n */\n\n/**\n * This function is used to mark string literals representing CSS class names\n * so that they can be transformed statically. This allows for modularization\n * and minification of CSS class names.\n *\n * In static_upstream, this function is actually implemented, but it should\n * eventually be replaced with something more descriptive, and the transform\n * that is used in the main stack should be ported for use elsewhere.\n *\n * @param string|object className to modularize, or an object of key/values.\n *                      In the object case, the values are conditions that\n *                      determine if the className keys should be included.\n * @param [string ...]  Variable list of classNames in the string case.\n * @return string       Renderable space-separated CSS className.\n */\nfunction cx(classNames) {\n  if (typeof classNames == 'object') {\n    return Object.keys(classNames).filter(function (className) {\n      return classNames[className];\n    }).join(' ');\n  } else {\n    return Array.prototype.join.call(arguments, ' ');\n  }\n}\n\nmodule.exports = cx;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/cx.js"],"names":["cx","classNames","Object","keys","filter","className","join","Array","prototype","call","arguments","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;AAeA,SAASA,EAAT,CAAYC,UAAZ,EAAwB;AACtB,MAAI,OAAOA,UAAP,IAAqB,QAAzB,EAAmC;AACjC,WAAOC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,CAA+B,UAASC,SAAT,EAAoB;AACxD,aAAOJ,UAAU,CAACI,SAAD,CAAjB;AACD,KAFM,EAEJC,IAFI,CAEC,GAFD,CAAP;AAGD,GAJD,MAIO;AACL,WAAOC,KAAK,CAACC,SAAN,CAAgBF,IAAhB,CAAqBG,IAArB,CAA0BC,SAA1B,EAAqC,GAArC,CAAP;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBZ,EAAjB","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule cx\n */\n\n/**\n * This function is used to mark string literals representing CSS class names\n * so that they can be transformed statically. This allows for modularization\n * and minification of CSS class names.\n *\n * In static_upstream, this function is actually implemented, but it should\n * eventually be replaced with something more descriptive, and the transform\n * that is used in the main stack should be ported for use elsewhere.\n *\n * @param string|object className to modularize, or an object of key/values.\n *                      In the object case, the values are conditions that\n *                      determine if the className keys should be included.\n * @param [string ...]  Variable list of classNames in the string case.\n * @return string       Renderable space-separated CSS className.\n */\nfunction cx(classNames) {\n  if (typeof classNames == 'object') {\n    return Object.keys(classNames).filter(function(className) {\n      return classNames[className];\n    }).join(' ');\n  } else {\n    return Array.prototype.join.call(arguments, ' ');\n  }\n}\n\nmodule.exports = cx;\n"]},"metadata":{},"sourceType":"script"}