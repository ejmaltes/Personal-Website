{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\n\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar flattenChildren = require(\"./flattenChildren\");\n\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\n\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\n\n\nvar updateDepth = 0;\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\n\nvar updateQueue = [];\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\n\nvar markupQueue = [];\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\n\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\n\n\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\n\n\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\n\n\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\n\n\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\n\n\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\n\n\nvar ReactMultiChild = {\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction) {\n      var children = flattenChildren(nestedChildren);\n      var mountImages = [];\n      var index = 0;\n      this._renderedChildren = children;\n\n      for (var name in children) {\n        var child = children[name];\n\n        if (children.hasOwnProperty(name)) {\n          // The rendered children must be turned into instances as they're\n          // mounted.\n          var childInstance = instantiateReactComponent(child, null);\n          children[name] = childInstance; // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n\n          var rootID = this._rootNodeID + name;\n          var mountImage = childInstance.mountComponent(rootID, transaction, this._mountDepth + 1);\n          childInstance._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n\n      try {\n        var prevChildren = this._renderedChildren; // Remove any rendered children.\n\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        } // Set new text content.\n\n\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildren, transaction) {\n      updateDepth++;\n      var errorThrown = true;\n\n      try {\n        this._updateChildren(nextNestedChildren, transaction);\n\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildren, transaction) {\n      var nextChildren = flattenChildren(nextNestedChildren);\n      var prevChildren = this._renderedChildren;\n\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n\n      var name; // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n\n      var lastIndex = 0;\n      var nextIndex = 0;\n\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n\n        var prevChild = prevChildren && prevChildren[name];\n        var prevElement = prevChild && prevChild._currentElement;\n        var nextElement = nextChildren[name];\n\n        if (shouldUpdateReactComponent(prevElement, nextElement)) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild.receiveComponent(nextElement, transaction);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n\n            this._unmountChildByName(prevChild, name);\n          } // The child must be instantiated before it's mounted.\n\n\n          var nextChildInstance = instantiateReactComponent(nextElement, null);\n\n          this._mountChildByNameAtIndex(nextChildInstance, name, nextIndex, transaction);\n        }\n\n        nextIndex++;\n      } // Remove children that are no longer present.\n\n\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren[name])) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n\n      for (var name in renderedChildren) {\n        var renderedChild = renderedChildren[name]; // TODO: When is this not true?\n\n        if (renderedChild.unmountComponent) {\n          renderedChild.unmountComponent();\n        }\n      }\n\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = child.mountComponent(rootID, transaction, this._mountDepth + 1);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n      this._renderedChildren = this._renderedChildren || {};\n      this._renderedChildren[name] = child;\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function (child, name) {\n      this.removeChild(child);\n      child._mountIndex = null;\n      child.unmountComponent();\n      delete this._renderedChildren[name];\n    }\n  }\n};\nmodule.exports = ReactMultiChild;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/ReactMultiChild.js"],"names":["ReactComponent","require","ReactMultiChildUpdateTypes","flattenChildren","instantiateReactComponent","shouldUpdateReactComponent","updateDepth","updateQueue","markupQueue","enqueueMarkup","parentID","markup","toIndex","push","parentNode","type","INSERT_MARKUP","markupIndex","textContent","fromIndex","enqueueMove","MOVE_EXISTING","enqueueRemove","REMOVE_NODE","enqueueTextContent","TEXT_CONTENT","processQueue","length","BackendIDOperations","dangerouslyProcessChildrenUpdates","clearQueue","ReactMultiChild","Mixin","mountChildren","nestedChildren","transaction","children","mountImages","index","_renderedChildren","name","child","hasOwnProperty","childInstance","rootID","_rootNodeID","mountImage","mountComponent","_mountDepth","_mountIndex","updateTextContent","nextContent","errorThrown","prevChildren","_unmountChildByName","setTextContent","updateChildren","nextNestedChildren","_updateChildren","nextChildren","lastIndex","nextIndex","prevChild","prevElement","_currentElement","nextElement","moveChild","Math","max","receiveComponent","nextChildInstance","_mountChildByNameAtIndex","unmountChildren","renderedChildren","renderedChild","unmountComponent","createChild","removeChild","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactMultiChildUpdateTypes = require(\"./ReactMultiChildUpdateTypes\");\n\nvar flattenChildren = require(\"./flattenChildren\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    textContent: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    textContent: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    textContent: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponent.BackendIDOperations.dangerouslyProcessChildrenUpdates(\n      updateQueue,\n      markupQueue\n    );\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function(nestedChildren, transaction) {\n      var children = flattenChildren(nestedChildren);\n      var mountImages = [];\n      var index = 0;\n      this._renderedChildren = children;\n      for (var name in children) {\n        var child = children[name];\n        if (children.hasOwnProperty(name)) {\n          // The rendered children must be turned into instances as they're\n          // mounted.\n          var childInstance = instantiateReactComponent(child, null);\n          children[name] = childInstance;\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = childInstance.mountComponent(\n            rootID,\n            transaction,\n            this._mountDepth + 1\n          );\n          childInstance._mountIndex = index;\n          mountImages.push(mountImage);\n          index++;\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function(nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function(nextNestedChildren, transaction) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildren, transaction);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          errorThrown ? clearQueue() : processQueue();\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildren Nested child maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function(nextNestedChildren, transaction) {\n      var nextChildren = flattenChildren(nextNestedChildren);\n      var prevChildren = this._renderedChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var prevElement = prevChild && prevChild._currentElement;\n        var nextElement = nextChildren[name];\n        if (shouldUpdateReactComponent(prevElement, nextElement)) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild.receiveComponent(nextElement, transaction);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChildByName(prevChild, name);\n          }\n          // The child must be instantiated before it's mounted.\n          var nextChildInstance = instantiateReactComponent(\n            nextElement,\n            null\n          );\n          this._mountChildByNameAtIndex(\n            nextChildInstance, name, nextIndex, transaction\n          );\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) &&\n            !(nextChildren && nextChildren[name])) {\n          this._unmountChildByName(prevChildren[name], name);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function() {\n      var renderedChildren = this._renderedChildren;\n      for (var name in renderedChildren) {\n        var renderedChild = renderedChildren[name];\n        // TODO: When is this not true?\n        if (renderedChild.unmountComponent) {\n          renderedChild.unmountComponent();\n        }\n      }\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function(child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function(child, mountImage) {\n      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function(child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function(textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function(child, name, index, transaction) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = child.mountComponent(\n        rootID,\n        transaction,\n        this._mountDepth + 1\n      );\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n      this._renderedChildren = this._renderedChildren || {};\n      this._renderedChildren[name] = child;\n    },\n\n    /**\n     * Unmounts a rendered child by name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @param {string} name Name of the child in `this._renderedChildren`.\n     * @private\n     */\n    _unmountChildByName: function(child, name) {\n      this.removeChild(child);\n      child._mountIndex = null;\n      child.unmountComponent();\n      delete this._renderedChildren[name];\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;\n"]},"metadata":{},"sourceType":"script"}