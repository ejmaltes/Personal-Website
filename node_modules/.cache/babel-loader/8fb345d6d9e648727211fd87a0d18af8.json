{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\nvar invariant = require(\"./invariant\"); // Store a reference to the <input> `ReactDOMComponent`. TODO: use string\n\n\nvar input = ReactElement.createFactory(ReactDOM.input.type);\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\n\nvar ReactDOMInput = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMInput',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  getInitialState: function () {\n    var defaultValue = this.props.defaultValue;\n    return {\n      initialChecked: this.props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null\n    };\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n    props.defaultChecked = null;\n    props.defaultValue = null;\n    var value = LinkedValueUtils.getValue(this);\n    props.value = value != null ? value : this.state.initialValue;\n    var checked = LinkedValueUtils.getChecked(this);\n    props.checked = checked != null ? checked : this.state.initialChecked;\n    props.onChange = this._handleChange;\n    return input(props, this.props.children);\n  },\n  componentDidMount: function () {\n    var id = ReactMount.getID(this.getDOMNode());\n    instancesByReactID[id] = this;\n  },\n  componentWillUnmount: function () {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n  componentDidUpdate: function (prevProps, prevState, prevContext) {\n    var rootNode = this.getDOMNode();\n\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(rootNode, 'checked', this.props.checked || false);\n    }\n\n    var value = LinkedValueUtils.getValue(this);\n\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    } // Here we use asap to wait until all updates have propagated, which\n    // is important when using controlled components within layers:\n    // https://github.com/facebook/react/issues/1698\n\n\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n    var name = this.props.name;\n\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode();\n      var queryRoot = rootNode;\n\n      while (queryRoot.parentNode) {\n        queryRoot = queryRoot.parentNode;\n      } // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `querySelectorAll` to ensure we don't miss anything.\n\n\n      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n\n        if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n          continue;\n        }\n\n        var otherID = ReactMount.getID(otherNode);\n        \"production\" !== process.env.NODE_ENV ? invariant(otherID, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(otherID);\n        var otherInstance = instancesByReactID[otherID];\n        \"production\" !== process.env.NODE_ENV ? invariant(otherInstance, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(otherInstance); // If this is a controlled radio button group, forcing the input that\n        // was previously checked to update will cause it to be come re-checked\n        // as appropriate.\n\n        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n      }\n    }\n\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMInput;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/ReactDOMInput.js"],"names":["AutoFocusMixin","require","DOMPropertyOperations","LinkedValueUtils","ReactBrowserComponentMixin","ReactCompositeComponent","ReactElement","ReactDOM","ReactMount","ReactUpdates","assign","invariant","input","createFactory","type","instancesByReactID","forceUpdateIfMounted","isMounted","forceUpdate","ReactDOMInput","createClass","displayName","mixins","Mixin","getInitialState","defaultValue","props","initialChecked","defaultChecked","initialValue","render","value","getValue","state","checked","getChecked","onChange","_handleChange","children","componentDidMount","id","getID","getDOMNode","componentWillUnmount","rootNode","componentDidUpdate","prevProps","prevState","prevContext","setValueForProperty","event","returnValue","getOnChange","call","asap","name","queryRoot","parentNode","group","querySelectorAll","JSON","stringify","i","groupLen","length","otherNode","form","otherID","process","env","NODE_ENV","otherInstance","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\n// Store a reference to the <input> `ReactDOMComponent`. TODO: use string\nvar input = ReactElement.createFactory(ReactDOM.input.type);\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.forceUpdate();\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMInput',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    return {\n      initialChecked: this.props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null\n    };\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    props.defaultChecked = null;\n    props.defaultValue = null;\n\n    var value = LinkedValueUtils.getValue(this);\n    props.value = value != null ? value : this.state.initialValue;\n\n    var checked = LinkedValueUtils.getChecked(this);\n    props.checked = checked != null ? checked : this.state.initialChecked;\n\n    props.onChange = this._handleChange;\n\n    return input(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    var id = ReactMount.getID(this.getDOMNode());\n    instancesByReactID[id] = this;\n  },\n\n  componentWillUnmount: function() {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var rootNode = this.getDOMNode();\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(\n        rootNode,\n        'checked',\n        this.props.checked || false\n      );\n    }\n\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n    // Here we use asap to wait until all updates have propagated, which\n    // is important when using controlled components within layers:\n    // https://github.com/facebook/react/issues/1698\n    ReactUpdates.asap(forceUpdateIfMounted, this);\n\n    var name = this.props.name;\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode();\n      var queryRoot = rootNode;\n\n      while (queryRoot.parentNode) {\n        queryRoot = queryRoot.parentNode;\n      }\n\n      // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `querySelectorAll` to ensure we don't miss anything.\n      var group = queryRoot.querySelectorAll(\n        'input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n        if (otherNode === rootNode ||\n            otherNode.form !== rootNode.form) {\n          continue;\n        }\n        var otherID = ReactMount.getID(otherNode);\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          otherID,\n          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +\n          'same `name` is not supported.'\n        ) : invariant(otherID));\n        var otherInstance = instancesByReactID[otherID];\n        (\"production\" !== process.env.NODE_ENV ? invariant(\n          otherInstance,\n          'ReactDOMInput: Unknown radio button ID %s.',\n          otherID\n        ) : invariant(otherInstance));\n        // If this is a controlled radio button group, forcing the input that\n        // was previously checked to update will cause it to be come re-checked\n        // as appropriate.\n        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n      }\n    }\n\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMInput;\n"]},"metadata":{},"sourceType":"script"}