{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\n\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\"); // Store a reference to the <select> `ReactDOMComponent`. TODO: use string\n\n\nvar select = ReactElement.createFactory(ReactDOM.select.type);\n\nfunction updateWithPendingValueIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.setState({\n      value: this._pendingValue\n    });\n    this._pendingValue = 0;\n  }\n}\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\n\n\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return;\n  }\n\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\"The `\" + propName + \"` prop supplied to <select> must be an array if \" + \"`multiple` is true.\");\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\"The `\" + propName + \"` prop supplied to <select> must be a scalar \" + \"value if `multiple` is false.\");\n    }\n  }\n}\n/**\n * If `value` is supplied, updates <option> elements on mount and update.\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {?*} propValue For uncontrolled components, null/undefined. For\n * controlled components, a string (or with `multiple`, a list of strings).\n * @private\n */\n\n\nfunction updateOptions(component, propValue) {\n  var multiple = component.props.multiple;\n  var value = propValue != null ? propValue : component.state.value;\n  var options = component.getDOMNode().options;\n  var selectedValue, i, l;\n\n  if (multiple) {\n    selectedValue = {};\n\n    for (i = 0, l = value.length; i < l; ++i) {\n      selectedValue['' + value[i]] = true;\n    }\n  } else {\n    selectedValue = '' + value;\n  }\n\n  for (i = 0, l = options.length; i < l; i++) {\n    var selected = multiple ? selectedValue.hasOwnProperty(options[i].value) : options[i].value === selectedValue;\n\n    if (selected !== options[i].selected) {\n      options[i].selected = selected;\n    }\n  }\n}\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * string. If `multiple` is true, the prop must be an array of strings.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\n\n\nvar ReactDOMSelect = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMSelect',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n  getInitialState: function () {\n    return {\n      value: this.props.defaultValue || (this.props.multiple ? [] : '')\n    };\n  },\n  componentWillMount: function () {\n    this._pendingValue = null;\n  },\n  componentWillReceiveProps: function (nextProps) {\n    if (!this.props.multiple && nextProps.multiple) {\n      this.setState({\n        value: [this.state.value]\n      });\n    } else if (this.props.multiple && !nextProps.multiple) {\n      this.setState({\n        value: this.state.value[0]\n      });\n    }\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n    props.onChange = this._handleChange;\n    props.value = null;\n    return select(props, this.props.children);\n  },\n  componentDidMount: function () {\n    updateOptions(this, LinkedValueUtils.getValue(this));\n  },\n  componentDidUpdate: function (prevProps) {\n    var value = LinkedValueUtils.getValue(this);\n    var prevMultiple = !!prevProps.multiple;\n    var multiple = !!this.props.multiple;\n\n    if (value != null || prevMultiple !== multiple) {\n      updateOptions(this, value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n\n    var selectedValue;\n\n    if (this.props.multiple) {\n      selectedValue = [];\n      var options = event.target.options;\n\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          selectedValue.push(options[i].value);\n        }\n      }\n    } else {\n      selectedValue = event.target.value;\n    }\n\n    this._pendingValue = selectedValue;\n    ReactUpdates.asap(updateWithPendingValueIfMounted, this);\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMSelect;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/ReactDOMSelect.js"],"names":["AutoFocusMixin","require","LinkedValueUtils","ReactBrowserComponentMixin","ReactCompositeComponent","ReactElement","ReactDOM","ReactUpdates","assign","select","createFactory","type","updateWithPendingValueIfMounted","isMounted","setState","value","_pendingValue","selectValueType","props","propName","componentName","multiple","Array","isArray","Error","updateOptions","component","propValue","state","options","getDOMNode","selectedValue","i","l","length","selected","hasOwnProperty","ReactDOMSelect","createClass","displayName","mixins","Mixin","propTypes","defaultValue","getInitialState","componentWillMount","componentWillReceiveProps","nextProps","render","onChange","_handleChange","children","componentDidMount","getValue","componentDidUpdate","prevProps","prevMultiple","event","returnValue","getOnChange","call","target","push","asap","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMSelect\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactElement = require(\"./ReactElement\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar assign = require(\"./Object.assign\");\n\n// Store a reference to the <select> `ReactDOMComponent`. TODO: use string\nvar select = ReactElement.createFactory(ReactDOM.select.type);\n\nfunction updateWithPendingValueIfMounted() {\n  /*jshint validthis:true */\n  if (this.isMounted()) {\n    this.setState({value: this._pendingValue});\n    this._pendingValue = 0;\n  }\n}\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return;\n  }\n  if (props.multiple) {\n    if (!Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be an array if \") +\n        (\"`multiple` is true.\")\n      );\n    }\n  } else {\n    if (Array.isArray(props[propName])) {\n      return new Error(\n        (\"The `\" + propName + \"` prop supplied to <select> must be a scalar \") +\n        (\"value if `multiple` is false.\")\n      );\n    }\n  }\n}\n\n/**\n * If `value` is supplied, updates <option> elements on mount and update.\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {?*} propValue For uncontrolled components, null/undefined. For\n * controlled components, a string (or with `multiple`, a list of strings).\n * @private\n */\nfunction updateOptions(component, propValue) {\n  var multiple = component.props.multiple;\n  var value = propValue != null ? propValue : component.state.value;\n  var options = component.getDOMNode().options;\n  var selectedValue, i, l;\n  if (multiple) {\n    selectedValue = {};\n    for (i = 0, l = value.length; i < l; ++i) {\n      selectedValue['' + value[i]] = true;\n    }\n  } else {\n    selectedValue = '' + value;\n  }\n  for (i = 0, l = options.length; i < l; i++) {\n    var selected = multiple ?\n      selectedValue.hasOwnProperty(options[i].value) :\n      options[i].value === selectedValue;\n\n    if (selected !== options[i].selected) {\n      options[i].selected = selected;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * string. If `multiple` is true, the prop must be an array of strings.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMSelect',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n\n  getInitialState: function() {\n    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};\n  },\n\n  componentWillMount: function() {\n    this._pendingValue = null;\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    if (!this.props.multiple && nextProps.multiple) {\n      this.setState({value: [this.state.value]});\n    } else if (this.props.multiple && !nextProps.multiple) {\n      this.setState({value: this.state.value[0]});\n    }\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = assign({}, this.props);\n\n    props.onChange = this._handleChange;\n    props.value = null;\n\n    return select(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    updateOptions(this, LinkedValueUtils.getValue(this));\n  },\n\n  componentDidUpdate: function(prevProps) {\n    var value = LinkedValueUtils.getValue(this);\n    var prevMultiple = !!prevProps.multiple;\n    var multiple = !!this.props.multiple;\n    if (value != null || prevMultiple !== multiple) {\n      updateOptions(this, value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      returnValue = onChange.call(this, event);\n    }\n\n    var selectedValue;\n    if (this.props.multiple) {\n      selectedValue = [];\n      var options = event.target.options;\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          selectedValue.push(options[i].value);\n        }\n      }\n    } else {\n      selectedValue = event.target.value;\n    }\n\n    this._pendingValue = selectedValue;\n    ReactUpdates.asap(updateWithPendingValueIfMounted, this);\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMSelect;\n"]},"metadata":{},"sourceType":"script"}