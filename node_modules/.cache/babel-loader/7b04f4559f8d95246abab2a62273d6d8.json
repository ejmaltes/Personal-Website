{"ast":null,"code":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponent\n */\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\n\nvar invariant = require(\"./invariant\");\n\nvar genericComponentClass = null; // This registry keeps track of wrapper classes around native tags\n\nvar tagToComponentClass = {};\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function (componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  }\n};\n/**\n * Create an internal class for a specific tag.\n *\n * @param {string} tag The tag for which to create an internal instance.\n * @param {any} props The props passed to the instance constructor.\n * @return {ReactComponent} component The injected empty component.\n */\n\nfunction createInstanceForTag(tag, props, parentType) {\n  var componentClass = tagToComponentClass[tag];\n\n  if (componentClass == null) {\n    \"production\" !== process.env.NODE_ENV ? invariant(genericComponentClass, 'There is no registered component for the tag %s', tag) : invariant(genericComponentClass);\n    return new genericComponentClass(tag, props);\n  }\n\n  if (parentType === tag) {\n    // Avoid recursion\n    \"production\" !== process.env.NODE_ENV ? invariant(genericComponentClass, 'There is no registered component for the tag %s', tag) : invariant(genericComponentClass);\n    return new genericComponentClass(tag, props);\n  } // Unwrap legacy factories\n\n\n  return new componentClass.type(props);\n}\n\nvar ReactNativeComponent = {\n  createInstanceForTag: createInstanceForTag,\n  injection: ReactNativeComponentInjection\n};\nmodule.exports = ReactNativeComponent;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/ReactNativeComponent.js"],"names":["assign","require","invariant","genericComponentClass","tagToComponentClass","ReactNativeComponentInjection","injectGenericComponentClass","componentClass","injectComponentClasses","componentClasses","createInstanceForTag","tag","props","parentType","process","env","NODE_ENV","type","ReactNativeComponent","injection","module","exports"],"mappings":"AAAA;;;;;;;;;;AAWA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIE,qBAAqB,GAAG,IAA5B,C,CACA;;AACA,IAAIC,mBAAmB,GAAG,EAA1B;AAEA,IAAIC,6BAA6B,GAAG;AAClC;AACA;AACAC,EAAAA,2BAA2B,EAAE,UAASC,cAAT,EAAyB;AACpDJ,IAAAA,qBAAqB,GAAGI,cAAxB;AACD,GALiC;AAMlC;AACA;AACAC,EAAAA,sBAAsB,EAAE,UAASC,gBAAT,EAA2B;AACjDT,IAAAA,MAAM,CAACI,mBAAD,EAAsBK,gBAAtB,CAAN;AACD;AAViC,CAApC;AAaA;;;;;;;;AAOA,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,KAAnC,EAA0CC,UAA1C,EAAsD;AACpD,MAAIN,cAAc,GAAGH,mBAAmB,CAACO,GAAD,CAAxC;;AACA,MAAIJ,cAAc,IAAI,IAAtB,EAA4B;AACzB,qBAAiBO,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCd,SAAS,CAChDC,qBADgD,EAEhD,iDAFgD,EAGhDQ,GAHgD,CAAjD,GAIGT,SAAS,CAACC,qBAAD,CAJb;AAKA,WAAO,IAAIA,qBAAJ,CAA0BQ,GAA1B,EAA+BC,KAA/B,CAAP;AACD;;AACD,MAAIC,UAAU,KAAKF,GAAnB,EAAwB;AACtB;AACC,qBAAiBG,OAAO,CAACC,GAAR,CAAYC,QAA7B,GAAwCd,SAAS,CAChDC,qBADgD,EAEhD,iDAFgD,EAGhDQ,GAHgD,CAAjD,GAIGT,SAAS,CAACC,qBAAD,CAJb;AAKA,WAAO,IAAIA,qBAAJ,CAA0BQ,GAA1B,EAA+BC,KAA/B,CAAP;AACD,GAlBmD,CAmBpD;;;AACA,SAAO,IAAIL,cAAc,CAACU,IAAnB,CAAwBL,KAAxB,CAAP;AACD;;AAED,IAAIM,oBAAoB,GAAG;AACzBR,EAAAA,oBAAoB,EAAEA,oBADG;AAEzBS,EAAAA,SAAS,EAAEd;AAFc,CAA3B;AAKAe,MAAM,CAACC,OAAP,GAAiBH,oBAAjB","sourcesContent":["/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponent\n */\n\n\"use strict\";\n\nvar assign = require(\"./Object.assign\");\nvar invariant = require(\"./invariant\");\n\nvar genericComponentClass = null;\n// This registry keeps track of wrapper classes around native tags\nvar tagToComponentClass = {};\n\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function(componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function(componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  }\n};\n\n/**\n * Create an internal class for a specific tag.\n *\n * @param {string} tag The tag for which to create an internal instance.\n * @param {any} props The props passed to the instance constructor.\n * @return {ReactComponent} component The injected empty component.\n */\nfunction createInstanceForTag(tag, props, parentType) {\n  var componentClass = tagToComponentClass[tag];\n  if (componentClass == null) {\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      genericComponentClass,\n      'There is no registered component for the tag %s',\n      tag\n    ) : invariant(genericComponentClass));\n    return new genericComponentClass(tag, props);\n  }\n  if (parentType === tag) {\n    // Avoid recursion\n    (\"production\" !== process.env.NODE_ENV ? invariant(\n      genericComponentClass,\n      'There is no registered component for the tag %s',\n      tag\n    ) : invariant(genericComponentClass));\n    return new genericComponentClass(tag, props);\n  }\n  // Unwrap legacy factories\n  return new componentClass.type(props);\n}\n\nvar ReactNativeComponent = {\n  createInstanceForTag: createInstanceForTag,\n  injection: ReactNativeComponentInjection\n};\n\nmodule.exports = ReactNativeComponent;\n"]},"metadata":{},"sourceType":"script"}