{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTextComponent\n * @typechecks static-only\n */\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar ReactComponent = require(\"./ReactComponent\");\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar assign = require(\"./Object.assign\");\n\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactTextComponent\n * @extends ReactComponent\n * @internal\n */\n\n\nvar ReactTextComponent = function (props) {// This constructor and it's argument is currently used by mocks.\n};\n\nassign(ReactTextComponent.prototype, ReactComponent.Mixin, {\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(this, rootID, transaction, mountDepth);\n    var escapedText = escapeTextForBrowser(this.props);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {object} nextComponent Contains the next text content.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextComponent, transaction) {\n    var nextProps = nextComponent.props;\n\n    if (nextProps !== this.props) {\n      this.props = nextProps;\n      ReactComponent.BackendIDOperations.updateTextContentByID(this._rootNodeID, nextProps);\n    }\n  }\n});\n\nvar ReactTextComponentFactory = function (text) {\n  // Bypass validation and configuration\n  return new ReactElement(ReactTextComponent, null, null, null, null, text);\n};\n\nReactTextComponentFactory.type = ReactTextComponent;\nmodule.exports = ReactTextComponentFactory;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/ReactTextComponent.js"],"names":["DOMPropertyOperations","require","ReactComponent","ReactElement","assign","escapeTextForBrowser","ReactTextComponent","props","prototype","Mixin","mountComponent","rootID","transaction","mountDepth","call","escapedText","renderToStaticMarkup","createMarkupForID","receiveComponent","nextComponent","nextProps","BackendIDOperations","updateTextContentByID","_rootNodeID","ReactTextComponentFactory","text","type","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAYA;;AAEA,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAIG,MAAM,GAAGH,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAII,oBAAoB,GAAGJ,OAAO,CAAC,wBAAD,CAAlC;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIK,kBAAkB,GAAG,UAASC,KAAT,EAAgB,CACvC;AACD,CAFD;;AAIAH,MAAM,CAACE,kBAAkB,CAACE,SAApB,EAA+BN,cAAc,CAACO,KAA9C,EAAqD;AAEzD;;;;;;;;;;AAUAC,EAAAA,cAAc,EAAE,UAASC,MAAT,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0C;AACxDX,IAAAA,cAAc,CAACO,KAAf,CAAqBC,cAArB,CAAoCI,IAApC,CACE,IADF,EAEEH,MAFF,EAGEC,WAHF,EAIEC,UAJF;AAOA,QAAIE,WAAW,GAAGV,oBAAoB,CAAC,KAAKE,KAAN,CAAtC;;AAEA,QAAIK,WAAW,CAACI,oBAAhB,EAAsC;AACpC;AACA;AACA;AACA,aAAOD,WAAP;AACD;;AAED,WACE,WAAWf,qBAAqB,CAACiB,iBAAtB,CAAwCN,MAAxC,CAAX,GAA6D,GAA7D,GACEI,WADF,GAEA,SAHF;AAKD,GAlCwD;;AAoCzD;;;;;;;AAOAG,EAAAA,gBAAgB,EAAE,UAASC,aAAT,EAAwBP,WAAxB,EAAqC;AACrD,QAAIQ,SAAS,GAAGD,aAAa,CAACZ,KAA9B;;AACA,QAAIa,SAAS,KAAK,KAAKb,KAAvB,EAA8B;AAC5B,WAAKA,KAAL,GAAaa,SAAb;AACAlB,MAAAA,cAAc,CAACmB,mBAAf,CAAmCC,qBAAnC,CACE,KAAKC,WADP,EAEEH,SAFF;AAID;AACF;AApDwD,CAArD,CAAN;;AAwDA,IAAII,yBAAyB,GAAG,UAASC,IAAT,EAAe;AAC7C;AACA,SAAO,IAAItB,YAAJ,CAAiBG,kBAAjB,EAAqC,IAArC,EAA2C,IAA3C,EAAiD,IAAjD,EAAuD,IAAvD,EAA6DmB,IAA7D,CAAP;AACD,CAHD;;AAKAD,yBAAyB,CAACE,IAA1B,GAAiCpB,kBAAjC;AAEAqB,MAAM,CAACC,OAAP,GAAiBJ,yBAAjB","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactTextComponent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactElement = require(\"./ReactElement\");\n\nvar assign = require(\"./Object.assign\");\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactTextComponent = function(props) {\n  // This constructor and it's argument is currently used by mocks.\n};\n\nassign(ReactTextComponent.prototype, ReactComponent.Mixin, {\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(\n      this,\n      rootID,\n      transaction,\n      mountDepth\n    );\n\n    var escapedText = escapeTextForBrowser(this.props);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return (\n      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +\n        escapedText +\n      '</span>'\n    );\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {object} nextComponent Contains the next text content.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function(nextComponent, transaction) {\n    var nextProps = nextComponent.props;\n    if (nextProps !== this.props) {\n      this.props = nextProps;\n      ReactComponent.BackendIDOperations.updateTextContentByID(\n        this._rootNodeID,\n        nextProps\n      );\n    }\n  }\n\n});\n\nvar ReactTextComponentFactory = function(text) {\n  // Bypass validation and configuration\n  return new ReactElement(ReactTextComponent, null, null, null, null, text);\n};\n\nReactTextComponentFactory.type = ReactTextComponent;\n\nmodule.exports = ReactTextComponentFactory;\n"]},"metadata":{},"sourceType":"script"}