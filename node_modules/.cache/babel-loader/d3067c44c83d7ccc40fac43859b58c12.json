{"ast":null,"code":"/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElementValidator\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\n\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\n\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar monitorCodeUse = require(\"./monitorCodeUse\");\n\nvar warning = require(\"./warning\");\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {\n  'react_key_warning': {},\n  'react_numeric_key_warning': {}\n};\nvar ownerHasMonitoredObjectMap = {};\nvar loggedTypeFailures = {};\nvar NUMERIC_PROPERTY_REGEX = /^\\d+$/;\n/**\n * Gets the current owner's displayName for use in warnings.\n *\n * @internal\n * @return {?string} Display name or undefined\n */\n\nfunction getCurrentOwnerDisplayName() {\n  var current = ReactCurrentOwner.current;\n  return current && current.constructor.displayName || undefined;\n}\n/**\n * Warn if the component doesn't have an explicit key assigned to it.\n * This component is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component's parent's type.\n */\n\n\nfunction validateExplicitKey(component, parentType) {\n  if (component._store.validated || component.key != null) {\n    return;\n  }\n\n  component._store.validated = true;\n  warnAndMonitorForKeyUse('react_key_warning', 'Each child in an array should have a unique \"key\" prop.', component, parentType);\n}\n/**\n * Warn if the key is being defined as an object property but has an incorrect\n * value.\n *\n * @internal\n * @param {string} name Property name of the key.\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component's parent's type.\n */\n\n\nfunction validatePropertyKey(name, component, parentType) {\n  if (!NUMERIC_PROPERTY_REGEX.test(name)) {\n    return;\n  }\n\n  warnAndMonitorForKeyUse('react_numeric_key_warning', 'Child objects should have non-numeric keys so ordering is preserved.', component, parentType);\n}\n/**\n * Shared warning and monitoring code for the key warnings.\n *\n * @internal\n * @param {string} warningID The id used when logging.\n * @param {string} message The base warning that gets output.\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component's parent's type.\n */\n\n\nfunction warnAndMonitorForKeyUse(warningID, message, component, parentType) {\n  var ownerName = getCurrentOwnerDisplayName();\n  var parentName = parentType.displayName;\n  var useName = ownerName || parentName;\n  var memoizer = ownerHasKeyUseWarning[warningID];\n\n  if (memoizer.hasOwnProperty(useName)) {\n    return;\n  }\n\n  memoizer[useName] = true;\n  message += ownerName ? \" Check the render method of \" + ownerName + \".\" : \" Check the renderComponent call using <\" + parentName + \">.\"; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwnerName = null;\n\n  if (component._owner && component._owner !== ReactCurrentOwner.current) {\n    // Name of the component that originally created this child.\n    childOwnerName = component._owner.constructor.displayName;\n    message += \" It was passed a child from \" + childOwnerName + \".\";\n  }\n\n  message += ' See http://fb.me/react-warning-keys for more information.';\n  monitorCodeUse(warningID, {\n    component: useName,\n    componentOwner: childOwnerName\n  });\n  console.warn(message);\n}\n/**\n * Log that we're using an object map. We're considering deprecating this\n * feature and replace it with proper Map and ImmutableMap data structures.\n *\n * @internal\n */\n\n\nfunction monitorUseOfObjectMap() {\n  var currentName = getCurrentOwnerDisplayName() || '';\n\n  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {\n    return;\n  }\n\n  ownerHasMonitoredObjectMap[currentName] = true;\n  monitorCodeUse('react_object_map_children');\n}\n/**\n * Ensure that every component either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {*} component Statically passed child of any type.\n * @param {*} parentType component's parent's type.\n * @return {boolean}\n */\n\n\nfunction validateChildKeys(component, parentType) {\n  if (Array.isArray(component)) {\n    for (var i = 0; i < component.length; i++) {\n      var child = component[i];\n\n      if (ReactElement.isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactElement.isValidElement(component)) {\n    // This component was passed in a valid location.\n    component._store.validated = true;\n  } else if (component && typeof component === 'object') {\n    monitorUseOfObjectMap();\n\n    for (var name in component) {\n      validatePropertyKey(name, component[name], parentType);\n    }\n  }\n}\n/**\n * Assert that the props are valid\n *\n * @param {string} componentName Name of the component for error messages.\n * @param {object} propTypes Map of prop name to a ReactPropType\n * @param {object} props\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @private\n */\n\n\nfunction checkPropTypes(componentName, propTypes, props, location) {\n  for (var propName in propTypes) {\n    if (propTypes.hasOwnProperty(propName)) {\n      var error; // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n\n      try {\n        error = propTypes[propName](props, propName, componentName, location);\n      } catch (ex) {\n        error = ex;\n      }\n\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true; // This will soon use the warning module\n\n        monitorCodeUse('react_failed_descriptor_type_check', {\n          message: error.message\n        });\n      }\n    }\n  }\n}\n\nvar ReactElementValidator = {\n  createElement: function (type, props, children) {\n    // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n    \"production\" !== process.env.NODE_ENV ? warning(type != null, 'React.createElement: type should not be null or undefined. It should ' + 'be a string (for DOM elements) or a ReactClass (for composite ' + 'components).') : null;\n    var element = ReactElement.createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    }\n\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n\n    if (type) {\n      var name = type.displayName;\n\n      if (type.propTypes) {\n        checkPropTypes(name, type.propTypes, element.props, ReactPropTypeLocations.prop);\n      }\n\n      if (type.contextTypes) {\n        checkPropTypes(name, type.contextTypes, element._context, ReactPropTypeLocations.context);\n      }\n    }\n\n    return element;\n  },\n  createFactory: function (type) {\n    var validatedFactory = ReactElementValidator.createElement.bind(null, type);\n    validatedFactory.type = type;\n    return validatedFactory;\n  }\n};\nmodule.exports = ReactElementValidator;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/ReactElementValidator.js"],"names":["ReactElement","require","ReactPropTypeLocations","ReactCurrentOwner","monitorCodeUse","warning","ownerHasKeyUseWarning","ownerHasMonitoredObjectMap","loggedTypeFailures","NUMERIC_PROPERTY_REGEX","getCurrentOwnerDisplayName","current","constructor","displayName","undefined","validateExplicitKey","component","parentType","_store","validated","key","warnAndMonitorForKeyUse","validatePropertyKey","name","test","warningID","message","ownerName","parentName","useName","memoizer","hasOwnProperty","childOwnerName","_owner","componentOwner","console","warn","monitorUseOfObjectMap","currentName","validateChildKeys","Array","isArray","i","length","child","isValidElement","checkPropTypes","componentName","propTypes","props","location","propName","error","ex","Error","ReactElementValidator","createElement","type","children","process","env","NODE_ENV","element","apply","arguments","prop","contextTypes","_context","context","createFactory","validatedFactory","bind","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactElementValidator\n */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\n\"use strict\";\n\nvar ReactElement = require(\"./ReactElement\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar monitorCodeUse = require(\"./monitorCodeUse\");\nvar warning = require(\"./warning\");\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {\n  'react_key_warning': {},\n  'react_numeric_key_warning': {}\n};\nvar ownerHasMonitoredObjectMap = {};\n\nvar loggedTypeFailures = {};\n\nvar NUMERIC_PROPERTY_REGEX = /^\\d+$/;\n\n/**\n * Gets the current owner's displayName for use in warnings.\n *\n * @internal\n * @return {?string} Display name or undefined\n */\nfunction getCurrentOwnerDisplayName() {\n  var current = ReactCurrentOwner.current;\n  return current && current.constructor.displayName || undefined;\n}\n\n/**\n * Warn if the component doesn't have an explicit key assigned to it.\n * This component is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component's parent's type.\n */\nfunction validateExplicitKey(component, parentType) {\n  if (component._store.validated || component.key != null) {\n    return;\n  }\n  component._store.validated = true;\n\n  warnAndMonitorForKeyUse(\n    'react_key_warning',\n    'Each child in an array should have a unique \"key\" prop.',\n    component,\n    parentType\n  );\n}\n\n/**\n * Warn if the key is being defined as an object property but has an incorrect\n * value.\n *\n * @internal\n * @param {string} name Property name of the key.\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component's parent's type.\n */\nfunction validatePropertyKey(name, component, parentType) {\n  if (!NUMERIC_PROPERTY_REGEX.test(name)) {\n    return;\n  }\n  warnAndMonitorForKeyUse(\n    'react_numeric_key_warning',\n    'Child objects should have non-numeric keys so ordering is preserved.',\n    component,\n    parentType\n  );\n}\n\n/**\n * Shared warning and monitoring code for the key warnings.\n *\n * @internal\n * @param {string} warningID The id used when logging.\n * @param {string} message The base warning that gets output.\n * @param {ReactComponent} component Component that requires a key.\n * @param {*} parentType component's parent's type.\n */\nfunction warnAndMonitorForKeyUse(warningID, message, component, parentType) {\n  var ownerName = getCurrentOwnerDisplayName();\n  var parentName = parentType.displayName;\n\n  var useName = ownerName || parentName;\n  var memoizer = ownerHasKeyUseWarning[warningID];\n  if (memoizer.hasOwnProperty(useName)) {\n    return;\n  }\n  memoizer[useName] = true;\n\n  message += ownerName ?\n    (\" Check the render method of \" + ownerName + \".\") :\n    (\" Check the renderComponent call using <\" + parentName + \">.\");\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  var childOwnerName = null;\n  if (component._owner && component._owner !== ReactCurrentOwner.current) {\n    // Name of the component that originally created this child.\n    childOwnerName = component._owner.constructor.displayName;\n\n    message += (\" It was passed a child from \" + childOwnerName + \".\");\n  }\n\n  message += ' See http://fb.me/react-warning-keys for more information.';\n  monitorCodeUse(warningID, {\n    component: useName,\n    componentOwner: childOwnerName\n  });\n  console.warn(message);\n}\n\n/**\n * Log that we're using an object map. We're considering deprecating this\n * feature and replace it with proper Map and ImmutableMap data structures.\n *\n * @internal\n */\nfunction monitorUseOfObjectMap() {\n  var currentName = getCurrentOwnerDisplayName() || '';\n  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {\n    return;\n  }\n  ownerHasMonitoredObjectMap[currentName] = true;\n  monitorCodeUse('react_object_map_children');\n}\n\n/**\n * Ensure that every component either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {*} component Statically passed child of any type.\n * @param {*} parentType component's parent's type.\n * @return {boolean}\n */\nfunction validateChildKeys(component, parentType) {\n  if (Array.isArray(component)) {\n    for (var i = 0; i < component.length; i++) {\n      var child = component[i];\n      if (ReactElement.isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (ReactElement.isValidElement(component)) {\n    // This component was passed in a valid location.\n    component._store.validated = true;\n  } else if (component && typeof component === 'object') {\n    monitorUseOfObjectMap();\n    for (var name in component) {\n      validatePropertyKey(name, component[name], parentType);\n    }\n  }\n}\n\n/**\n * Assert that the props are valid\n *\n * @param {string} componentName Name of the component for error messages.\n * @param {object} propTypes Map of prop name to a ReactPropType\n * @param {object} props\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @private\n */\nfunction checkPropTypes(componentName, propTypes, props, location) {\n  for (var propName in propTypes) {\n    if (propTypes.hasOwnProperty(propName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        error = propTypes[propName](props, propName, componentName, location);\n      } catch (ex) {\n        error = ex;\n      }\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n        // This will soon use the warning module\n        monitorCodeUse(\n          'react_failed_descriptor_type_check',\n          { message: error.message }\n        );\n      }\n    }\n  }\n}\n\nvar ReactElementValidator = {\n\n  createElement: function(type, props, children) {\n    // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n    (\"production\" !== process.env.NODE_ENV ? warning(\n      type != null,\n      'React.createElement: type should not be null or undefined. It should ' +\n        'be a string (for DOM elements) or a ReactClass (for composite ' +\n        'components).'\n    ) : null);\n\n    var element = ReactElement.createElement.apply(this, arguments);\n\n    // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n    if (element == null) {\n      return element;\n    }\n\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n\n    if (type) {\n      var name = type.displayName;\n      if (type.propTypes) {\n        checkPropTypes(\n          name,\n          type.propTypes,\n          element.props,\n          ReactPropTypeLocations.prop\n        );\n      }\n      if (type.contextTypes) {\n        checkPropTypes(\n          name,\n          type.contextTypes,\n          element._context,\n          ReactPropTypeLocations.context\n        );\n      }\n    }\n    return element;\n  },\n\n  createFactory: function(type) {\n    var validatedFactory = ReactElementValidator.createElement.bind(\n      null,\n      type\n    );\n    validatedFactory.type = type;\n    return validatedFactory;\n  }\n\n};\n\nmodule.exports = ReactElementValidator;\n"]},"metadata":{},"sourceType":"script"}