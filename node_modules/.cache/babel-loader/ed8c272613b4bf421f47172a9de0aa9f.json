{"ast":null,"code":"/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CompositionEventPlugin\n * @typechecks static-only\n */\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar EventPropagators = require(\"./EventPropagators\");\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar ReactInputSelection = require(\"./ReactInputSelection\");\n\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");\n\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\n\nvar keyOf = require(\"./keyOf\");\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\n\nvar START_KEYCODE = 229;\nvar useCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window; // In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. In Korean, for example,\n// the compositionend event contains only one character regardless of\n// how many characters have been composed since compositionstart.\n// We therefore use the fallback data while still using the native\n// events as triggers.\n\nvar useFallbackData = !useCompositionEvent || 'documentMode' in document && document.documentMode > 8 && document.documentMode <= 11;\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar currentComposition = null; // Events and their corresponding property names.\n\nvar eventTypes = {\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionEnd: null\n      }),\n      captured: keyOf({\n        onCompositionEndCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionStart: null\n      }),\n      captured: keyOf({\n        onCompositionStartCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({\n        onCompositionUpdate: null\n      }),\n      captured: keyOf({\n        onCompositionUpdateCapture: null\n      })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\n\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\n\n\nfunction isFallbackStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\n\n\nfunction isFallbackEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\n * Helper class stores information about selection and document state\n * so we can figure out what changed at a later date.\n *\n * @param {DOMEventTarget} root\n */\n\n\nfunction FallbackCompositionState(root) {\n  this.root = root;\n  this.startSelection = ReactInputSelection.getSelection(root);\n  this.startValue = this.getText();\n}\n/**\n * Get current text of input.\n *\n * @return {string}\n */\n\n\nFallbackCompositionState.prototype.getText = function () {\n  return this.root.value || this.root[getTextContentAccessor()];\n};\n/**\n * Text that has changed since the start of composition.\n *\n * @return {string}\n */\n\n\nFallbackCompositionState.prototype.getData = function () {\n  var endValue = this.getText();\n  var prefixLength = this.startSelection.start;\n  var suffixLength = this.startValue.length - this.startSelection.end;\n  return endValue.substr(prefixLength, endValue.length - suffixLength - prefixLength);\n};\n/**\n * This plugin creates `onCompositionStart`, `onCompositionUpdate` and\n * `onCompositionEnd` events on inputs, textareas and contentEditable\n * nodes.\n */\n\n\nvar CompositionEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var eventType;\n    var data;\n\n    if (useCompositionEvent) {\n      eventType = getCompositionEventType(topLevelType);\n    } else if (!currentComposition) {\n      if (isFallbackStart(topLevelType, nativeEvent)) {\n        eventType = eventTypes.compositionStart;\n      }\n    } else if (isFallbackEnd(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionEnd;\n    }\n\n    if (useFallbackData) {\n      // The current composition is stored statically and must not be\n      // overwritten while composition continues.\n      if (!currentComposition && eventType === eventTypes.compositionStart) {\n        currentComposition = new FallbackCompositionState(topLevelTarget);\n      } else if (eventType === eventTypes.compositionEnd) {\n        if (currentComposition) {\n          data = currentComposition.getData();\n          currentComposition = null;\n        }\n      }\n    }\n\n    if (eventType) {\n      var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent);\n\n      if (data) {\n        // Inject data generated from fallback path into the synthetic event.\n        // This matches the property of native CompositionEventInterface.\n        event.data = data;\n      }\n\n      EventPropagators.accumulateTwoPhaseDispatches(event);\n      return event;\n    }\n  }\n};\nmodule.exports = CompositionEventPlugin;","map":{"version":3,"sources":["/Users/ejmaltes/Desktop/Personal-Website/node_modules/react-object-fit-cover/node_modules/react/lib/CompositionEventPlugin.js"],"names":["EventConstants","require","EventPropagators","ExecutionEnvironment","ReactInputSelection","SyntheticCompositionEvent","getTextContentAccessor","keyOf","END_KEYCODES","START_KEYCODE","useCompositionEvent","canUseDOM","window","useFallbackData","document","documentMode","topLevelTypes","currentComposition","eventTypes","compositionEnd","phasedRegistrationNames","bubbled","onCompositionEnd","captured","onCompositionEndCapture","dependencies","topBlur","topCompositionEnd","topKeyDown","topKeyPress","topKeyUp","topMouseDown","compositionStart","onCompositionStart","onCompositionStartCapture","topCompositionStart","compositionUpdate","onCompositionUpdate","onCompositionUpdateCapture","topCompositionUpdate","getCompositionEventType","topLevelType","isFallbackStart","nativeEvent","keyCode","isFallbackEnd","indexOf","FallbackCompositionState","root","startSelection","getSelection","startValue","getText","prototype","value","getData","endValue","prefixLength","start","suffixLength","length","end","substr","CompositionEventPlugin","extractEvents","topLevelTarget","topLevelTargetID","eventType","data","event","getPooled","accumulateTwoPhaseDispatches","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CompositionEventPlugin\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPropagators = require(\"./EventPropagators\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\nvar ReactInputSelection = require(\"./ReactInputSelection\");\nvar SyntheticCompositionEvent = require(\"./SyntheticCompositionEvent\");\n\nvar getTextContentAccessor = require(\"./getTextContentAccessor\");\nvar keyOf = require(\"./keyOf\");\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar useCompositionEvent = (\n  ExecutionEnvironment.canUseDOM &&\n  'CompositionEvent' in window\n);\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. In Korean, for example,\n// the compositionend event contains only one character regardless of\n// how many characters have been composed since compositionstart.\n// We therefore use the fallback data while still using the native\n// events as triggers.\nvar useFallbackData = (\n  !useCompositionEvent ||\n  (\n    'documentMode' in document &&\n    document.documentMode > 8 &&\n    document.documentMode <= 11\n  )\n);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\nvar currentComposition = null;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionEnd: null}),\n      captured: keyOf({onCompositionEndCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionEnd,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionStart: null}),\n      captured: keyOf({onCompositionStartCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionStart,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({onCompositionUpdate: null}),\n      captured: keyOf({onCompositionUpdateCapture: null})\n    },\n    dependencies: [\n      topLevelTypes.topBlur,\n      topLevelTypes.topCompositionUpdate,\n      topLevelTypes.topKeyDown,\n      topLevelTypes.topKeyPress,\n      topLevelTypes.topKeyUp,\n      topLevelTypes.topMouseDown\n    ]\n  }\n};\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackStart(topLevelType, nativeEvent) {\n  return (\n    topLevelType === topLevelTypes.topKeyDown &&\n    nativeEvent.keyCode === START_KEYCODE\n  );\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return (nativeEvent.keyCode !== START_KEYCODE);\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Helper class stores information about selection and document state\n * so we can figure out what changed at a later date.\n *\n * @param {DOMEventTarget} root\n */\nfunction FallbackCompositionState(root) {\n  this.root = root;\n  this.startSelection = ReactInputSelection.getSelection(root);\n  this.startValue = this.getText();\n}\n\n/**\n * Get current text of input.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getText = function() {\n  return this.root.value || this.root[getTextContentAccessor()];\n};\n\n/**\n * Text that has changed since the start of composition.\n *\n * @return {string}\n */\nFallbackCompositionState.prototype.getData = function() {\n  var endValue = this.getText();\n  var prefixLength = this.startSelection.start;\n  var suffixLength = this.startValue.length - this.startSelection.end;\n\n  return endValue.substr(\n    prefixLength,\n    endValue.length - suffixLength - prefixLength\n  );\n};\n\n/**\n * This plugin creates `onCompositionStart`, `onCompositionUpdate` and\n * `onCompositionEnd` events on inputs, textareas and contentEditable\n * nodes.\n */\nvar CompositionEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n\n    var eventType;\n    var data;\n\n    if (useCompositionEvent) {\n      eventType = getCompositionEventType(topLevelType);\n    } else if (!currentComposition) {\n      if (isFallbackStart(topLevelType, nativeEvent)) {\n        eventType = eventTypes.compositionStart;\n      }\n    } else if (isFallbackEnd(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionEnd;\n    }\n\n    if (useFallbackData) {\n      // The current composition is stored statically and must not be\n      // overwritten while composition continues.\n      if (!currentComposition && eventType === eventTypes.compositionStart) {\n        currentComposition = new FallbackCompositionState(topLevelTarget);\n      } else if (eventType === eventTypes.compositionEnd) {\n        if (currentComposition) {\n          data = currentComposition.getData();\n          currentComposition = null;\n        }\n      }\n    }\n\n    if (eventType) {\n      var event = SyntheticCompositionEvent.getPooled(\n        eventType,\n        topLevelTargetID,\n        nativeEvent\n      );\n      if (data) {\n        // Inject data generated from fallback path into the synthetic event.\n        // This matches the property of native CompositionEventInterface.\n        event.data = data;\n      }\n      EventPropagators.accumulateTwoPhaseDispatches(event);\n      return event;\n    }\n  }\n};\n\nmodule.exports = CompositionEventPlugin;\n"]},"metadata":{},"sourceType":"script"}