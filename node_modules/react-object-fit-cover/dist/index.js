"use strict";

var _interopRequire = function (obj) {
  return obj && (obj["default"] || obj);
};

"use strict";

var React = _interopRequire(require('react/addons'));

var assign = _interopRequire(require('react/lib/Object.assign'));

var $ = _interopRequire(require('jquery'));

var ObjectFitCover = React.createClass({
  displayName: "ObjectFitCover",


  getInitialState: function () {
    return {};
  },

  getDefaultProps: function () {
    return {
      style: {} };
  },

  propTypes: {
    object: React.PropTypes.element.isRequired,
    objectAspectRatio: React.PropTypes.number.isRequired },

  componentDidMount: function () {
    this.$container = $(this.getDOMNode());
    this.resize();
    $(window).on("resize", this.resize);
  },

  componentDidUnmount: function () {
    $(window).off("resize", this.resize);
  },

  /**
   * Compute and set object dimensions using container dimensions and ratio
   */
  resize: function () {
    var _ref = this.containerDimensions();

    var containerHeight = _ref.height;
    var containerWidth = _ref.width;
    var containerRatio = containerWidth / containerHeight;
    var objectRatio = this.props.objectAspectRatio;

    var objectHeight, objectWidth, objectX, objectY;

    if (objectRatio > containerRatio) {
      objectHeight = containerHeight;
      objectWidth = objectHeight * objectRatio;

      objectY = 0;
      objectX = (containerWidth - objectWidth) / 2;
    } else {
      objectWidth = containerWidth;
      objectHeight = objectWidth / objectRatio;

      objectX = 0;
      objectY = (containerHeight - objectHeight) / 2;
    }

    this.setState({ objectHeight: objectHeight, objectWidth: objectWidth, objectX: objectX, objectY: objectY });
  },

  containerDimensions: function () {
    return {
      height: this.$container.outerHeight(),
      width: this.$container.width() };
  },

  render: function () {
    var style = assign({}, {
      overflow: "hidden" }, this.props.style);

    var objectStyle = {
      position: "absolute",
      left: this.state.objectX,
      top: this.state.objectY,
      width: this.state.objectWidth,
      height: this.state.objectHeight };

    var object = React.addons.cloneWithProps(this.props.object, {
      style: objectStyle });

    return (React.createElement("div", React.__spread({}, this.props, {
      style: style
    }), object));
  }

});

module.exports = ObjectFitCover;